import { MixedbreadAI, MixedbreadAIClient } from "@mixedbread-ai/sdk";
import type { MessageContent } from "@llamaindex/core/llms";
import type { BaseNodePostprocessor } from "@llamaindex/core/postprocessor";
import type { BaseNode, NodeWithScore } from "@llamaindex/core/schema";
type RerankingRequestWithoutInput = Omit<MixedbreadAI.RerankingRequest, "query" | "input">;
/**
 * Interface extending RerankingRequestWithoutInput with additional
 * parameters specific to the MixedbreadRerank class.
 */
export interface MixedbreadAIRerankerParams extends Omit<RerankingRequestWithoutInput, "model"> {
    /**
     * The model to use for reranking. For example "default" or "mixedbread-ai/mxbai-rerank-large-v1".
     * @default {"default"}
     */
    model?: string;
    /**
     * The API key to use.
     * @default {process.env.MXBAI_API_KEY}
     */
    apiKey?: string;
    /**
     * The base URL of the MixedbreadAI API.
     */
    baseUrl?: string;
    /**
     * The maximum number of retries to attempt.
     * @default {3}
     */
    maxRetries?: number;
    /**
     * Timeouts for the request.
     */
    timeoutInSeconds?: number;
}
/**
 * Node postprocessor that uses MixedbreadAI's rerank API.
 *
 * This class utilizes MixedbreadAI's rerank model to reorder a set of nodes based on their relevance
 * to a given query. The reranked nodes are then used for various applications like search results refinement.
 *
 * @example
 * const reranker = new MixedbreadAIReranker({ apiKey: 'your-api-key' });
 * const nodes = [{ node: new BaseNode('To bake bread you need flour') }, { node: new BaseNode('To bake bread you need yeast') }];
 * const query = "What do you need to bake bread?";
 * const result = await reranker.postprocessNodes(nodes, query);
 * console.log(result);
 *
 * @example
 * const reranker = new MixedbreadAIReranker({
 *   apiKey: 'your-api-key',
 *   model: 'mixedbread-ai/mxbai-rerank-large-v1',
 *   topK: 5,
 *   rankFields: ["title", "content"],
 *   returnInput: true,
 *   maxRetries: 5
 * });
 * const documents = [{ title: "Bread Recipe", content: "To bake bread you need flour" }, { title: "Bread Recipe", content: "To bake bread you need yeast" }];
 * const query = "What do you need to bake bread?";
 * const result = await reranker.rerank(documents, query);
 * console.log(result);
 */
export declare class MixedbreadAIReranker implements BaseNodePostprocessor {
    requestParams: RerankingRequestWithoutInput;
    requestOptions: MixedbreadAIClient.RequestOptions;
    private readonly client;
    /**
     * Constructor for MixedbreadRerank.
     * @param {Partial<MixedbreadAIRerankerParams>} params - An optional object with properties to configure the instance.
     * @throws {Error} If the API key is not provided or found in the environment variables.
     */
    constructor(params: Partial<MixedbreadAIRerankerParams>);
    /**
     * Reranks the nodes using the mixedbread.ai API.
     * @param {NodeWithScore[]} nodes - Array of nodes with scores.
     * @param {MessageContent} [query] - Query string.
     * @throws {Error} If query is undefined.
     *
     * @returns {Promise<NodeWithScore[]>} A Promise that resolves to an ordered list of nodes with relevance scores.
     *
     * @example
     * const nodes = [{ node: new BaseNode('To bake bread you need flour') }, { node: new BaseNode('To bake bread you need yeast') }];
     * const query = "What do you need to bake bread?";
     * const result = await reranker.postprocessNodes(nodes, query);
     * console.log(result);
     */
    postprocessNodes(nodes: NodeWithScore[], query?: MessageContent): Promise<NodeWithScore[]>;
    /**
     * Returns an ordered list of documents sorted by their relevance to the provided query.
     * @param {(Array<string> | Array<BaseNode> | Array<Record<string, unknown>>)} nodes - A list of documents as strings, DocumentInterfaces, or objects with a `pageContent` key.
     * @param {string} query - The query to use for reranking the documents.
     * @param {RerankingRequestWithoutInput} [options] - Optional parameters for reranking.
     *
     * @returns {Promise<Array<MixedbreadAI.RankedDocument>>} A Promise that resolves to an ordered list of documents with relevance scores.
     *
     * @example
     * const nodes = ["To bake bread you need flour", "To bake bread you need yeast"];
     * const query = "What do you need to bake bread?";
     * const result = await reranker.rerank(nodes, query);
     * console.log(result);
     */
    rerank(nodes: Array<string> | Array<BaseNode> | Array<Record<string, unknown>>, query: string, options?: RerankingRequestWithoutInput): Promise<Array<MixedbreadAI.RankedDocument>>;
}
export {};
