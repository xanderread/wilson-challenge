import type { BaseTool, ToolMetadata } from "@llamaindex/core/llms";
export type InterpreterParameter = {
    code: string;
};
export type InterpreterToolOutputImage = {
    base64_data: string;
    format: string;
    type: "image";
};
export type InterpreterToolOutput = {
    result: InterpreterToolOutputImage | string;
    stdout: string;
    stderr: string;
};
export type AzureDynamicSessionToolParams = {
    code?: string;
    metadata?: ToolMetadata<InterpreterParameter>;
    /**
     * The endpoint of the pool management service.
     */
    poolManagementEndpoint: string;
    /**
     * The session ID. If not provided, a new session ID will be generated.
     */
    sessionId?: string;
    /**
     * A function that returns the access token to be used for authentication.
     * If not provided, a default implementation that uses the DefaultAzureCredential
     * will be used.
     *
     * @returns The access token to be used for authentication.
     */
    azureADTokenProvider?: () => Promise<string>;
};
export interface RemoteFileMetadata {
    /**
     * The filename of the file.
     */
    filename: string;
    /**
     * The size of the file in bytes.
     */
    size: number;
    /**
     * The last modified time of the file.
     */
    last_modified_time: string;
    /**
     * The identifier of the file.
     */
    $id: string;
}
type DownloadFileMetadata = {
    /**
     * The path to download the file from, relative to `/mnt/data`.
     * @example "file.txt"
     * @example "folder/file.txt"
     */
    remoteFilename: string;
    /**
     * The path to save the downloaded file to.
     * If not provided, the file is returned as a ReadableStream.
     * @example "/path/to/file.txt"
     */
    localFilename?: string;
};
type UploadFileMetadata = {
    /**
     * The data to upload
     */
    data: Blob;
    /**
     * The path to the local file to upload
     * @example "file.txt"
     * @example "folder/file.txt"
     */
    remoteFilename: string;
};
/**
 * Azure Code Interpreter tool: A tool that allows you to interact with a dynamic session on Azure.
 */
export declare class AzureDynamicSessionTool implements BaseTool<AzureDynamicSessionToolParams> {
    private readonly outputDir;
    /**
     * The metadata for the tool.
     */
    metadata: ToolMetadata;
    /**
     * The session ID to use for the session pool. Defaults to a random UUID.
     */
    private sessionId;
    /**
     * The endpoint of the Azure pool management service.
     * This is where the tool will send requests to interact with the session pool.
     * If not provided, the tool will use the value of the `AZURE_POOL_MANAGEMENT_ENDPOINT` environment variable.
     */
    private poolManagementEndpoint;
    /**
     * A function that returns the access token to use for the session pool.
     */
    private azureADTokenProvider;
    constructor(params?: AzureDynamicSessionToolParams);
    _buildUrl(path: string): string;
    /**
     * Upload a file to the session under the path `/mnt/data`.
     * @param params.data The data to upload
     * @param params.remoteFilename The path to the local file to upload
     * @returns The remote file object. The list of metadatas for the uploaded files.
     */
    uploadFile(params: UploadFileMetadata): Promise<RemoteFileMetadata>;
    /**
     * Download a file from the session back to your local environment.
     * @param params.remoteFilename The path to download the file from, relative to `/mnt/data`.
     * @param params.localFilename The path to save the downloaded file to. If not provided, the file is returned as a BufferedReader.
     * @returns The file as a ReadableStream if no localFilename is provided. Otherwise, the file is saved to the localFilename.
     */
    downloadFile(params: DownloadFileMetadata): Promise<ReadableStream | void>;
    /**
     * List the files in the session.
     * @returns The metadata for the files in the session
     */
    listFiles(): Promise<RemoteFileMetadata[]>;
    /**
     * This tool is used to execute python commands when you need to perform calculations or computations in a Session. Input should be a valid python command. The tool returns the result, stdout, and stderr.
     * @param code Python code to be executed generated by llm.
     * @returns The result, stdout, and stderr.
     */
    call({ code, }: Pick<AzureDynamicSessionToolParams, "code">): Promise<InterpreterToolOutput>;
    /**
     * Saves a base64 encoded file to the disk.
     * @param base64Data The base64 encoded data to save.
     * @param ext The file extension.
     * @returns The path and filename to the saved file.
     */
    private saveToDisk;
    /**
     * Get the output path for the file.
     * @param filename The filename to save the file as.
     * @returns The output path for the file.
     */
    private getOutputPath;
    /**
     * Check if a file exists.
     * @param file The file to check.
     * @returns True if the file exists, false otherwise.
     */
    private exists;
}
export {};
