import { type FunctionCall, type Content as GeminiMessageContent, type SafetySetting } from "@google/generative-ai";
import { type GenerateContentResponse } from "@google-cloud/vertexai";
import type { BaseTool, ChatMessage, MessageType, ToolCallLLMMessageOptions } from "@llamaindex/core/llms";
import type { ChatContext, FunctionDeclaration, GeminiChatParamsNonStreaming, GeminiChatParamsStreaming, GeminiMessageRole, Part } from "./types.js";
export declare const getPartsText: (parts: Part[]) => string;
/**
 * Returns all text found in all parts of first candidate.
 */
export declare const getText: (response: GenerateContentResponse) => string;
export declare const cleanParts: (message: GeminiMessageContent) => GeminiMessageContent;
export declare const getChatContext: (params: GeminiChatParamsStreaming | GeminiChatParamsNonStreaming) => ChatContext;
export declare const mapBaseToolToGeminiFunctionDeclaration: (tool: BaseTool) => FunctionDeclaration;
/**
 * Helper class providing utility functions for Gemini
 */
export declare class GeminiHelper {
    static readonly ROLES_TO_GEMINI: Record<MessageType, GeminiMessageRole>;
    static readonly ROLES_FROM_GEMINI: Record<GeminiMessageRole, MessageType>;
    static mergeNeighboringSameRoleMessages(messages: GeminiMessageContent[]): GeminiMessageContent[];
    static messageContentToGeminiParts({ content, options, fnMap, }: Pick<ChatMessage<ToolCallLLMMessageOptions>, "content" | "options"> & {
        fnMap?: Record<string, string>;
    }): Part[];
    static chatMessageToGemini(message: ChatMessage<ToolCallLLMMessageOptions>, fnMap: Record<string, string>): GeminiMessageContent;
}
/**
 * Returns functionCall of first candidate.
 * Taken from https://github.com/google-gemini/generative-ai-js/ to be used with
 * vertexai as that library doesn't include it
 */
export declare function getFunctionCalls(response: GenerateContentResponse): FunctionCall[] | undefined;
/**
 * Safety settings to disable external filters
 * Documentation: https://ai.google.dev/gemini-api/docs/safety-settings
 */
export declare const DEFAULT_SAFETY_SETTINGS: SafetySetting[];
