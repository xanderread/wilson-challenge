import type pg from "pg";
import { BaseKVStore } from "./types.js";
export type DataType = Record<string, Record<string, any>>;
export type PostgresKVStoreBaseConfig = {
    schemaName?: string | undefined;
    tableName?: string | undefined;
};
export type PostgresKVStoreClientConfig = {
    /**
     * Client configuration options for the pg client.
     *
     * {@link https://node-postgres.com/apis/client#new-client PostgresSQL Client API}
     */
    clientConfig?: pg.ClientConfig | undefined;
} | {
    /**
     * A pg client or pool client instance.
     * If provided, make sure it is not connected to the database yet, or it will throw an error.
     */
    shouldConnect?: boolean | undefined;
    client?: pg.Client | pg.PoolClient;
};
export type PostgresKVStoreConfig = PostgresKVStoreBaseConfig & PostgresKVStoreClientConfig;
export declare class PostgresKVStore extends BaseKVStore {
    private schemaName;
    private tableName;
    private isDBConnected;
    private clientConfig;
    private db?;
    constructor(config?: PostgresKVStoreConfig);
    private getDb;
    private checkSchema;
    client(): Promise<pg.ClientBase>;
    put(key: string, val: any, collection?: string): Promise<void>;
    get(key: string, collection?: string): Promise<any>;
    getAll(collection?: string): Promise<DataType>;
    delete(key: string, collection?: string): Promise<boolean>;
}
