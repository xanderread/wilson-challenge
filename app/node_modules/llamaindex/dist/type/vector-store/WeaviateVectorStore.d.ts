import { BaseNode, type Metadata } from "@llamaindex/core/schema";
import { type DeleteManyOptions, type WeaviateClient } from "weaviate-client";
import { BaseVectorStore, type VectorStoreBaseParams, type VectorStoreQuery, type VectorStoreQueryResult } from "./types.js";
export declare class WeaviateVectorStore extends BaseVectorStore {
    storesText: boolean;
    private flatMetadata;
    private weaviateClient?;
    private clusterURL;
    private apiKey;
    private indexName;
    private idKey;
    private contentKey;
    private embeddingKey;
    private metadataKey;
    constructor(init?: VectorStoreBaseParams & {
        weaviateClient?: WeaviateClient;
        cloudOptions?: {
            clusterURL?: string;
            apiKey?: string;
        };
        indexName?: string;
        idKey?: string;
        contentKey?: string;
        metadataKey?: string;
        embeddingKey?: string;
    });
    client(): Promise<WeaviateClient>;
    add(nodes: BaseNode<Metadata>[]): Promise<string[]>;
    delete(refDocId: string, deleteOptions?: DeleteManyOptions<boolean>): Promise<void>;
    query(query: VectorStoreQuery & {
        queryStr: string;
    }): Promise<VectorStoreQueryResult>;
    private getClient;
    private ensureCollection;
    private doesCollectionExist;
    private createCollection;
    private getQueryAlpha;
    private getAllProperties;
    private checkIndexName;
    private getNodeSimilarity;
}
