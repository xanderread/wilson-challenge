import type pg from "pg";
import type { IsomorphicDB } from "@llamaindex/core/vector-store";
import type { VercelPool } from "@vercel/postgres";
import type { Sql } from "postgres";
import { BaseVectorStore, type VectorStoreBaseParams, type VectorStoreQuery, type VectorStoreQueryResult } from "./types.js";
import type { BaseEmbedding } from "@llamaindex/core/embeddings";
import type { BaseNode, Metadata } from "@llamaindex/core/schema";
export declare const PGVECTOR_SCHEMA = "public";
export declare const PGVECTOR_TABLE = "llamaindex_embedding";
export declare const DEFAULT_DIMENSIONS = 1536;
type PGVectorStoreBaseConfig = {
    schemaName?: string | undefined;
    tableName?: string | undefined;
    dimensions?: number | undefined;
    embedModel?: BaseEmbedding | undefined;
    performSetup?: boolean | undefined;
};
export type PGVectorStoreConfig = VectorStoreBaseParams & PGVectorStoreBaseConfig & ({
    /**
     * Client configuration options for the pg client.
     *
     * {@link https://node-postgres.com/apis/client#new-client PostgresSQL Client API}
     */
    clientConfig: pg.ClientConfig;
} | {
    /**
     * A pg client or pool client instance.
     * If provided, make sure it is not connected to the database yet, or it will throw an error.
     */
    shouldConnect?: boolean | undefined;
    client: pg.Client | pg.PoolClient;
} | {
    /**
     * No need to connect to the database, the client is already connected.
     */
    shouldConnect?: false;
    client: Sql | VercelPool;
});
/**
 * Provides support for writing and querying vector data in Postgres.
 * Note: Can't be used with data created using the Python version of the vector store (https://docs.llamaindex.ai/en/stable/examples/vector_stores/postgres/)
 */
export declare class PGVectorStore extends BaseVectorStore {
    storesText: boolean;
    private collection;
    private readonly schemaName;
    private readonly tableName;
    private readonly dimensions;
    private isDBConnected;
    private db;
    private readonly clientConfig;
    private readonly performSetup;
    constructor(config: PGVectorStoreConfig);
    /**
     * Setter for the collection property.
     * Using a collection allows for simple segregation of vector data,
     * e.g. by user, source, or access-level.
     * Leave/set blank to ignore the collection value when querying.
     * @param coll Name for the collection.
     */
    setCollection(coll: string): void;
    /**
     * Getter for the collection property.
     * Using a collection allows for simple segregation of vector data,
     * e.g. by user, source, or access-level.
     * Leave/set blank to ignore the collection value when querying.
     * @returns The currently-set collection value.  Default is empty string.
     */
    getCollection(): string;
    private getDb;
    private checkSchema;
    /**
     * Connects to the database specified in environment vars.
     * This method also checks and creates the vector extension,
     * the destination table and indexes if not found.
     * @returns A connection to the database, or the error encountered while connecting/setting up.
     */
    client(): Promise<IsomorphicDB>;
    /**
     * Delete all vector records for the specified collection.
     * NOTE: Uses the collection property controlled by setCollection/getCollection.
     * @returns The result of the delete query.
     */
    clearCollection(): Promise<any[]>;
    private getDataToInsert;
    /**
     * Adds vector record(s) to the table.
     * NOTE: Uses the collection property controlled by setCollection/getCollection.
     * @param embeddingResults The Nodes to be inserted, optionally including metadata tuples.
     * @returns A list of zero or more id values for the created records.
     */
    add(embeddingResults: BaseNode<Metadata>[]): Promise<string[]>;
    /**
     * Deletes a single record from the database by id.
     * NOTE: Uses the collection property controlled by setCollection/getCollection.
     * @param refDocId Unique identifier for the record to delete.
     * @param deleteKwargs Required by VectorStore interface.  Currently ignored.
     * @returns Promise that resolves if the delete query did not throw an error.
     */
    delete(refDocId: string, deleteKwargs?: any): Promise<void>;
    private toPostgresCondition;
    private toPostgresOperator;
    private buildFilterClause;
    /**
     * Query the vector store for the closest matching data to the query embeddings
     * @param query The VectorStoreQuery to be used
     * @param options Required by VectorStore interface.  Currently ignored.
     * @returns Zero or more Document instances with data from the vector store.
     */
    query(query: VectorStoreQuery, options?: any): Promise<VectorStoreQueryResult>;
    /**
     * Required by VectorStore interface.  Currently ignored.
     * @param persistPath
     * @returns Resolved Promise.
     */
    persist(persistPath: string): Promise<void>;
}
export {};
