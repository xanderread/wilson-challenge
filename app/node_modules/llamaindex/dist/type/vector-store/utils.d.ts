import type { BaseNode, Metadata } from "@llamaindex/core/schema";
import type { MetadataFilterValue } from "./types.js";
export declare function validateIsFlat(obj: {
    [key: string]: any;
}): void;
export declare function nodeToMetadata(node: BaseNode, removeText?: boolean, textField?: string, flatMetadata?: boolean): Metadata;
type MetadataDictToNodeOptions = {
    fallback: Record<string, any>;
};
export declare function metadataDictToNode(metadata: Metadata, options?: MetadataDictToNodeOptions): BaseNode;
export declare const parsePrimitiveValue: (value?: MetadataFilterValue) => string | number;
export declare const parseArrayValue: (value?: MetadataFilterValue) => string[] | number[];
export declare const parseNumberValue: (value?: MetadataFilterValue) => number;
export declare const escapeLikeString: (value: string) => string;
export {};
