"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "GeminiVertexSession", {
    enumerable: true,
    get: function() {
        return GeminiVertexSession;
    }
});
const _vertexai = require("@google-cloud/vertexai");
const _utils = require("@llamaindex/core/utils");
const _env = require("@llamaindex/env");
const _utils1 = require("./utils.js");
class GeminiVertexSession {
    vertex;
    preview = false;
    constructor(options){
        const project = options?.project ?? (0, _env.getEnv)("GOOGLE_VERTEX_PROJECT");
        const location = options?.location ?? (0, _env.getEnv)("GOOGLE_VERTEX_LOCATION");
        if (!project || !location) {
            throw new Error("Set Google Vertex project and location in GOOGLE_VERTEX_PROJECT and GOOGLE_VERTEX_LOCATION env variables");
        }
        this.vertex = new _vertexai.VertexAI({
            ...options,
            project,
            location
        });
        this.preview = options?.preview ?? false;
    }
    getGenerativeModel(metadata) {
        if (this.preview) {
            return this.vertex.preview.getGenerativeModel({
                safetySettings: _utils1.DEFAULT_SAFETY_SETTINGS,
                ...metadata
            });
        }
        return this.vertex.getGenerativeModel({
            safetySettings: _utils1.DEFAULT_SAFETY_SETTINGS,
            ...metadata
        });
    }
    getResponseText(response) {
        return (0, _utils1.getText)(response);
    }
    getToolsFromResponse(response) {
        return (0, _utils1.getFunctionCalls)(response)?.map((call)=>({
                name: call.name,
                input: call.args,
                id: (0, _env.randomUUID)()
            }));
    }
    async *getChatStream(result) {
        yield* (0, _utils.streamConverter)(result.stream, (response)=>{
            const tools = this.getToolsFromResponse(response);
            const options = tools?.length ? {
                toolCall: tools
            } : {};
            return {
                delta: this.getResponseText(response),
                raw: response,
                options
            };
        });
    }
    getCompletionStream(result) {
        return (0, _utils.streamConverter)(result.stream, (response)=>({
                text: this.getResponseText(response),
                raw: response
            }));
    }
}
