"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_SAFETY_SETTINGS: function() {
        return DEFAULT_SAFETY_SETTINGS;
    },
    GeminiHelper: function() {
        return GeminiHelper;
    },
    cleanParts: function() {
        return cleanParts;
    },
    getChatContext: function() {
        return getChatContext;
    },
    getFunctionCalls: function() {
        return getFunctionCalls;
    },
    getPartsText: function() {
        return getPartsText;
    },
    getText: function() {
        return getText;
    },
    mapBaseToolToGeminiFunctionDeclaration: function() {
        return mapBaseToolToGeminiFunctionDeclaration;
    }
});
const _generativeai = require("@google/generative-ai");
const _utils = require("@llamaindex/core/utils");
const FILE_EXT_MIME_TYPES = {
    png: "image/png",
    jpeg: "image/jpeg",
    jpg: "image/jpeg",
    webp: "image/webp",
    heic: "image/heic",
    heif: "image/heif"
};
const ACCEPTED_IMAGE_MIME_TYPES = Object.values(FILE_EXT_MIME_TYPES);
const getFileURLExtension = (url)=>{
    const pathname = new URL(url).pathname;
    const parts = pathname.split(".");
    return parts.length > 1 ? parts.pop()?.toLowerCase() || null : null;
};
const getFileURLMimeType = (url)=>{
    const ext = getFileURLExtension(url);
    return ext ? FILE_EXT_MIME_TYPES[ext] || null : null;
};
const getImageParts = (message)=>{
    if (message.image_url.url.startsWith("data:")) {
        const { mimeType, base64: data } = (0, _utils.extractDataUrlComponents)(message.image_url.url);
        if (!mimeType || !ACCEPTED_IMAGE_MIME_TYPES.includes(mimeType)) {
            throw new Error(`Gemini only accepts the following mimeTypes: ${ACCEPTED_IMAGE_MIME_TYPES.join("\n")}`);
        }
        return {
            inlineData: {
                mimeType,
                data
            }
        };
    }
    const mimeType = getFileURLMimeType(message.image_url.url);
    if (!mimeType || !ACCEPTED_IMAGE_MIME_TYPES.includes(mimeType)) {
        throw new Error(`Gemini only accepts the following mimeTypes: ${ACCEPTED_IMAGE_MIME_TYPES.join("\n")}`);
    }
    return {
        fileData: {
            mimeType,
            fileUri: message.image_url.url
        }
    };
};
const getPartsText = (parts)=>{
    const textStrings = [];
    if (parts.length) {
        for (const part of parts){
            if (part.text) {
                textStrings.push(part.text);
            }
        }
    }
    if (textStrings.length > 0) {
        return textStrings.join("");
    } else {
        return "";
    }
};
const getText = (response)=>{
    if (response.candidates?.[0].content?.parts) {
        return getPartsText(response.candidates?.[0].content?.parts);
    }
    return "";
};
const cleanParts = (message)=>{
    return {
        ...message,
        parts: message.parts.filter((part)=>part.text?.trim() || part.inlineData || part.fileData || part.functionCall || part.functionResponse)
    };
};
const getChatContext = (params)=>{
    // Gemini doesn't allow:
    // 1. Consecutive messages from the same role
    // 2. Parts that have empty text
    const fnMap = params.messages.reduce((result, message)=>{
        if (message.options && "toolCall" in message.options) {
            message.options.toolCall.forEach((call)=>{
                result[call.id] = call.name;
            });
        }
        return result;
    }, {});
    const messages = GeminiHelper.mergeNeighboringSameRoleMessages(params.messages.map((message)=>GeminiHelper.chatMessageToGemini(message, fnMap))).map(cleanParts);
    const history = messages.slice(0, -1);
    const message = messages[messages.length - 1].parts;
    return {
        history,
        message
    };
};
const mapBaseToolToGeminiFunctionDeclaration = (tool)=>{
    const parameters = {
        type: tool.metadata.parameters?.type.toUpperCase(),
        properties: tool.metadata.parameters?.properties,
        description: tool.metadata.parameters?.description,
        required: tool.metadata.parameters?.required
    };
    return {
        name: tool.metadata.name,
        description: tool.metadata.description,
        parameters
    };
};
class GeminiHelper {
    // Gemini only has user and model roles. Put the rest in user role.
    static ROLES_TO_GEMINI = {
        user: "user",
        system: "user",
        assistant: "model",
        memory: "user"
    };
    static ROLES_FROM_GEMINI = {
        user: "user",
        model: "assistant"
    };
    static mergeNeighboringSameRoleMessages(messages) {
        return messages.map(cleanParts).filter((message)=>message.parts.length).reduce((result, current, index, original)=>{
            if (index > 0 && original[index - 1].role === current.role) {
                result[result.length - 1].parts = [
                    ...result[result.length - 1].parts,
                    ...current.parts
                ];
            } else {
                result.push(current);
            }
            return result;
        }, []);
    }
    static messageContentToGeminiParts({ content, options = undefined, fnMap = undefined }) {
        if (options && "toolResult" in options) {
            if (!fnMap) throw Error("fnMap must be set");
            const name = fnMap[options.toolResult.id];
            if (!name) {
                throw Error(`Could not find the name for fn call with id ${options.toolResult.id}`);
            }
            return [
                {
                    functionResponse: {
                        name,
                        response: {
                            result: options.toolResult.result
                        }
                    }
                }
            ];
        }
        if (options && "toolCall" in options) {
            return options.toolCall.map((call)=>({
                    functionCall: {
                        name: call.name,
                        args: call.input
                    }
                }));
        }
        if (typeof content === "string") {
            return [
                {
                    text: content
                }
            ];
        }
        const parts = [];
        const imageContents = content.filter((i)=>i.type === "image_url");
        parts.push(...imageContents.map(getImageParts));
        const textContents = content.filter((i)=>i.type === "text");
        parts.push(...textContents.map((t)=>({
                text: t.text
            })));
        return parts;
    }
    static chatMessageToGemini(message, fnMap) {
        return {
            role: GeminiHelper.ROLES_TO_GEMINI[message.role],
            parts: GeminiHelper.messageContentToGeminiParts({
                ...message,
                fnMap
            })
        };
    }
}
function getFunctionCalls(response) {
    const functionCalls = [];
    if (response.candidates?.[0].content?.parts) {
        for (const part of response.candidates?.[0].content?.parts){
            if (part.functionCall) {
                functionCalls.push(part.functionCall);
            }
        }
    }
    if (functionCalls.length > 0) {
        return functionCalls;
    } else {
        return undefined;
    }
}
const DEFAULT_SAFETY_SETTINGS = [
    {
        category: _generativeai.HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: _generativeai.HarmBlockThreshold.BLOCK_NONE
    },
    {
        category: _generativeai.HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: _generativeai.HarmBlockThreshold.BLOCK_NONE
    },
    {
        category: _generativeai.HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: _generativeai.HarmBlockThreshold.BLOCK_NONE
    },
    {
        category: _generativeai.HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: _generativeai.HarmBlockThreshold.BLOCK_NONE
    }
];
