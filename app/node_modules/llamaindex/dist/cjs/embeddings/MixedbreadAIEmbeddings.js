"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MixedbreadAIEmbeddings", {
    enumerable: true,
    get: function() {
        return MixedbreadAIEmbeddings;
    }
});
const _embeddings = require("@llamaindex/core/embeddings");
const _env = require("@llamaindex/env");
const _sdk = require("@mixedbread-ai/sdk");
class MixedbreadAIEmbeddings extends _embeddings.BaseEmbedding {
    requestParams;
    requestOptions;
    client;
    /**
   * Constructor for MixedbreadAIEmbeddings.
   * @param {Partial<MixedbreadAIEmbeddingsParams>} params - An optional object with properties to configure the instance.
   * @throws {Error} If the API key is not provided or found in the environment variables.
   * @throws {Error} If the batch size exceeds 256.
   */ constructor(params){
        super();
        const apiKey = params?.apiKey ?? (0, _env.getEnv)("MXBAI_API_KEY");
        if (!apiKey) {
            throw new Error("mixedbread ai API key not found. Either provide it in the constructor or set the 'MXBAI_API_KEY' environment variable.");
        }
        if (params?.embedBatchSize && params?.embedBatchSize > 256) {
            throw new Error("The maximum batch size for mixedbread ai embeddings API is 256.");
        }
        this.embedBatchSize = params?.embedBatchSize ?? 128;
        if (params?.embedInfo) {
            this.embedInfo = params?.embedInfo;
        }
        this.requestParams = {
            model: params?.model ?? "mixedbread-ai/mxbai-embed-large-v1",
            normalized: params?.normalized,
            dimensions: params?.dimensions,
            encodingFormat: params?.encodingFormat,
            truncationStrategy: params?.truncationStrategy,
            prompt: params?.prompt
        };
        this.requestOptions = {
            timeoutInSeconds: params?.timeoutInSeconds,
            maxRetries: params?.maxRetries ?? 3,
            // Support for this already exists in the python sdk and will be added to the js sdk soon
            // @ts-ignore
            additionalHeaders: {
                "user-agent": "@mixedbread-ai/llamaindex-ts-sdk"
            }
        };
        this.client = new _sdk.MixedbreadAIClient(params?.baseUrl ? {
            apiKey,
            environment: params?.baseUrl
        } : {
            apiKey
        });
    }
    /**
   * Generates an embedding for a single text.
   * @param {string} text - A string to generate an embedding for.
   * @returns {Promise<number[]>} A Promise that resolves to an array of numbers representing the embedding.
   *
   * @example
   * const query = "Represent this sentence for searching relevant passages: Is baking bread fun?";
   * const result = await mxbai.getTextEmbedding(text);
   * console.log(result);
   */ async getTextEmbedding(text) {
        return (await this.getTextEmbeddings([
            text
        ]))[0];
    }
    /**
   * Generates embeddings for an array of texts.
   * @param {string[]} texts - An array of strings to generate embeddings for.
   * @returns {Promise<Array<number[]>>} A Promise that resolves to an array of embeddings.
   *
   * @example
   * const texts = ["Baking bread is fun", "I love baking"];
   * const result = await mxbai.getTextEmbeddings(texts);
   * console.log(result);
   */ getTextEmbeddings = async (texts)=>{
        if (texts.length === 0) {
            return [];
        }
        const response = await this.client.embeddings({
            ...this.requestParams,
            input: texts
        }, this.requestOptions);
        return response.data.map((d)=>d.embedding);
    };
}
