{"version":3,"sources":["../../src/index.ts","../../src/generated/runtime.ts","../../src/generated/api.ts","../../src/generated/models.ts","../../src/generated/configuration.ts","../../src/Errors.ts","../../src/Collection.ts","../../src/utils.ts","../../src/auth.ts","../../src/ChromaFetch.ts","../../src/AdminClient.ts","../../src/embeddings/DefaultEmbeddingFunction.ts","../../src/ChromaClient.ts","../../src/CloudClient.ts","../../src/embeddings/OpenAIEmbeddingFunction.ts","../../src/embeddings/CohereEmbeddingFunction.ts","../../src/embeddings/TransformersEmbeddingFunction.ts","../../src/embeddings/HuggingFaceEmbeddingServerFunction.ts","../../src/embeddings/JinaEmbeddingFunction.ts","../../src/embeddings/GoogleGeminiEmbeddingFunction.ts","../../src/embeddings/OllamaEmbeddingFunction.ts"],"sourcesContent":["export { ChromaClient } from \"./ChromaClient\";\nexport { AdminClient } from \"./AdminClient\";\nexport { CloudClient } from \"./CloudClient\";\nexport type { IEmbeddingFunction } from \"./embeddings/IEmbeddingFunction\";\nexport { OpenAIEmbeddingFunction } from \"./embeddings/OpenAIEmbeddingFunction\";\nexport { CohereEmbeddingFunction } from \"./embeddings/CohereEmbeddingFunction\";\nexport { TransformersEmbeddingFunction } from \"./embeddings/TransformersEmbeddingFunction\";\nexport { DefaultEmbeddingFunction } from \"./embeddings/DefaultEmbeddingFunction\";\nexport { HuggingFaceEmbeddingServerFunction } from \"./embeddings/HuggingFaceEmbeddingServerFunction\";\nexport { JinaEmbeddingFunction } from \"./embeddings/JinaEmbeddingFunction\";\nexport { GoogleGenerativeAiEmbeddingFunction } from \"./embeddings/GoogleGeminiEmbeddingFunction\";\nexport { OllamaEmbeddingFunction } from \"./embeddings/OllamaEmbeddingFunction\";\n\nexport type {\n  IncludeEnum,\n  GetParams,\n  CollectionType,\n  CollectionMetadata,\n  Embedding,\n  Embeddings,\n  Metadata,\n  Metadatas,\n  Document,\n  Documents,\n  ID,\n  IDs,\n  Where,\n  WhereDocument,\n  GetResponse,\n  QueryResponse,\n  ListCollectionsParams,\n  ChromaClientParams,\n  CreateCollectionParams,\n  GetOrCreateCollectionParams,\n  GetCollectionParams,\n  DeleteCollectionParams,\n  AddRecordsParams,\n  UpsertRecordsParams,\n  UpdateRecordsParams,\n  ModifyCollectionParams,\n  QueryRecordsParams,\n  PeekParams,\n  DeleteParams,\n  CollectionParams,\n} from \"./types\";\n","import \"isomorphic-fetch\";\n/* eslint-disable */\n// tslint:disable\n/**\n * FastAPI\n *\n *\n * OpenAPI spec version: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */\n\nexport const defaultFetch = fetch;\nimport { Configuration } from \"./configuration\";\n\nexport const BASE_PATH = \"\";\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: \",\",\n  ssv: \" \",\n  tsv: \"\\t\",\n  pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @type FetchAPI\n */\nexport type FetchAPI = typeof defaultFetch;\n\n/**\n *\n * @export\n * @interface FetchArgs\n */\nexport interface FetchArgs {\n  url: string;\n  options: RequestInit;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration?: Configuration;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected fetch: FetchAPI = defaultFetch,\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  constructor(\n    public field: string,\n    msg?: string,\n  ) {\n    super(msg);\n    Object.setPrototypeOf(this, RequiredError.prototype);\n    this.name = \"RequiredError\";\n  }\n}\n","/* eslint-disable */\n// tslint:disable\n/**\n * FastAPI\n *\n *\n * OpenAPI spec version: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */\n\nimport { Configuration } from \"./configuration\";\nimport {\n  BASE_PATH,\n  COLLECTION_FORMATS,\n  FetchAPI,\n  FetchArgs,\n  BaseAPI,\n  RequiredError,\n  defaultFetch,\n} from \"./runtime\";\nimport { Api } from \"./models\";\n\nexport type FactoryFunction<T> = (\n  configuration?: Configuration,\n  basePath?: string,\n  fetch?: FetchAPI,\n) => T;\n\n/**\n * ApiApi - fetch parameter creator\n * @export\n */\nexport const ApiApiFetchParamCreator = function (\n  configuration?: Configuration,\n) {\n  return {\n    /**\n     * @summary Add\n     * @param {string} collectionId\n     * @param {Api.AddEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    add(\n      collectionId: string,\n      request: Api.AddEmbedding,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionId' is not null or undefined\n      if (collectionId === null || collectionId === undefined) {\n        throw new RequiredError(\n          \"collectionId\",\n          \"Required parameter collectionId was null or undefined when calling add.\",\n        );\n      }\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling add.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_id}/add`.replace(\n        \"{collection_id}\",\n        encodeURIComponent(String(collectionId)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Delete\n     * @param {string} collectionId\n     * @param {Api.DeleteEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    aDelete(\n      collectionId: string,\n      request: Api.DeleteEmbedding,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionId' is not null or undefined\n      if (collectionId === null || collectionId === undefined) {\n        throw new RequiredError(\n          \"collectionId\",\n          \"Required parameter collectionId was null or undefined when calling aDelete.\",\n        );\n      }\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling aDelete.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_id}/delete`.replace(\n        \"{collection_id}\",\n        encodeURIComponent(String(collectionId)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Get\n     * @param {string} collectionId\n     * @param {Api.GetEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    aGet(\n      collectionId: string,\n      request: Api.GetEmbedding,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionId' is not null or undefined\n      if (collectionId === null || collectionId === undefined) {\n        throw new RequiredError(\n          \"collectionId\",\n          \"Required parameter collectionId was null or undefined when calling aGet.\",\n        );\n      }\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling aGet.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_id}/get`.replace(\n        \"{collection_id}\",\n        encodeURIComponent(String(collectionId)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Count\n     * @param {string} collectionId\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    count(collectionId: string, options: RequestInit = {}): FetchArgs {\n      // verify required parameter 'collectionId' is not null or undefined\n      if (collectionId === null || collectionId === undefined) {\n        throw new RequiredError(\n          \"collectionId\",\n          \"Required parameter collectionId was null or undefined when calling count.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_id}/count`.replace(\n        \"{collection_id}\",\n        encodeURIComponent(String(collectionId)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Count Collections\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    countCollections(\n      tenant: string | undefined,\n      database: string | undefined,\n      options: RequestInit = {},\n    ): FetchArgs {\n      let localVarPath = `/api/v1/count_collections`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter.append(\"tenant\", String(tenant));\n      }\n\n      if (database !== undefined) {\n        localVarQueryParameter.append(\"database\", String(database));\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Create Collection\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {Api.CreateCollection} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCollection(\n      tenant: string | undefined,\n      database: string | undefined,\n      request: Api.CreateCollection,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling createCollection.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter.append(\"tenant\", String(tenant));\n      }\n\n      if (database !== undefined) {\n        localVarQueryParameter.append(\"database\", String(database));\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Create Database\n     * @param {string} [tenant]\n     * @param {Api.CreateDatabase} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createDatabase(\n      tenant: string | undefined,\n      request: Api.CreateDatabase,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling createDatabase.\",\n        );\n      }\n      let localVarPath = `/api/v1/databases`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter.append(\"tenant\", String(tenant));\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Create Tenant\n     * @param {Api.CreateTenant} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTenant(\n      request: Api.CreateTenant,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling createTenant.\",\n        );\n      }\n      let localVarPath = `/api/v1/tenants`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Delete Collection\n     * @param {string} collectionName\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCollection(\n      collectionName: string,\n      tenant: string | undefined,\n      database: string | undefined,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionName' is not null or undefined\n      if (collectionName === null || collectionName === undefined) {\n        throw new RequiredError(\n          \"collectionName\",\n          \"Required parameter collectionName was null or undefined when calling deleteCollection.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_name}`.replace(\n        \"{collection_name}\",\n        encodeURIComponent(String(collectionName)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"DELETE\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter.append(\"tenant\", String(tenant));\n      }\n\n      if (database !== undefined) {\n        localVarQueryParameter.append(\"database\", String(database));\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Get Collection\n     * @param {string} collectionName\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCollection(\n      collectionName: string,\n      tenant: string | undefined,\n      database: string | undefined,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionName' is not null or undefined\n      if (collectionName === null || collectionName === undefined) {\n        throw new RequiredError(\n          \"collectionName\",\n          \"Required parameter collectionName was null or undefined when calling getCollection.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_name}`.replace(\n        \"{collection_name}\",\n        encodeURIComponent(String(collectionName)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter.append(\"tenant\", String(tenant));\n      }\n\n      if (database !== undefined) {\n        localVarQueryParameter.append(\"database\", String(database));\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Get Database\n     * @param {string} database\n     * @param {string} [tenant]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDatabase(\n      database: string,\n      tenant: string | undefined,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'database' is not null or undefined\n      if (database === null || database === undefined) {\n        throw new RequiredError(\n          \"database\",\n          \"Required parameter database was null or undefined when calling getDatabase.\",\n        );\n      }\n      let localVarPath = `/api/v1/databases/{database}`.replace(\n        \"{database}\",\n        encodeURIComponent(String(database)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter.append(\"tenant\", String(tenant));\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Get Nearest Neighbors\n     * @param {string} collectionId\n     * @param {Api.QueryEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getNearestNeighbors(\n      collectionId: string,\n      request: Api.QueryEmbedding,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionId' is not null or undefined\n      if (collectionId === null || collectionId === undefined) {\n        throw new RequiredError(\n          \"collectionId\",\n          \"Required parameter collectionId was null or undefined when calling getNearestNeighbors.\",\n        );\n      }\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling getNearestNeighbors.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_id}/query`.replace(\n        \"{collection_id}\",\n        encodeURIComponent(String(collectionId)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Get Tenant\n     * @param {string} tenant\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTenant(tenant: string, options: RequestInit = {}): FetchArgs {\n      // verify required parameter 'tenant' is not null or undefined\n      if (tenant === null || tenant === undefined) {\n        throw new RequiredError(\n          \"tenant\",\n          \"Required parameter tenant was null or undefined when calling getTenant.\",\n        );\n      }\n      let localVarPath = `/api/v1/tenants/{tenant}`.replace(\n        \"{tenant}\",\n        encodeURIComponent(String(tenant)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Heartbeat\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    heartbeat(options: RequestInit = {}): FetchArgs {\n      let localVarPath = `/api/v1/heartbeat`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary List Collections\n     * @param {number | null} [limit]\n     * @param {number | null} [offset]\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listCollections(\n      limit: number | null | undefined,\n      offset: number | null | undefined,\n      tenant: string | undefined,\n      database: string | undefined,\n      options: RequestInit = {},\n    ): FetchArgs {\n      let localVarPath = `/api/v1/collections`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      if (limit !== undefined) {\n        localVarQueryParameter.append(\"limit\", String(limit));\n      }\n\n      if (offset !== undefined) {\n        localVarQueryParameter.append(\"offset\", String(offset));\n      }\n\n      if (tenant !== undefined) {\n        localVarQueryParameter.append(\"tenant\", String(tenant));\n      }\n\n      if (database !== undefined) {\n        localVarQueryParameter.append(\"database\", String(database));\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Pre Flight Checks\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    preFlightChecks(options: RequestInit = {}): FetchArgs {\n      let localVarPath = `/api/v1/pre-flight-checks`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Reset\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    reset(options: RequestInit = {}): FetchArgs {\n      let localVarPath = `/api/v1/reset`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Root\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    root(options: RequestInit = {}): FetchArgs {\n      let localVarPath = `/api/v1`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Update\n     * @param {string} collectionId\n     * @param {Api.UpdateEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    update(\n      collectionId: string,\n      request: Api.UpdateEmbedding,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionId' is not null or undefined\n      if (collectionId === null || collectionId === undefined) {\n        throw new RequiredError(\n          \"collectionId\",\n          \"Required parameter collectionId was null or undefined when calling update.\",\n        );\n      }\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling update.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_id}/update`.replace(\n        \"{collection_id}\",\n        encodeURIComponent(String(collectionId)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Update Collection\n     * @param {string} collectionId\n     * @param {Api.UpdateCollection} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCollection(\n      collectionId: string,\n      request: Api.UpdateCollection,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionId' is not null or undefined\n      if (collectionId === null || collectionId === undefined) {\n        throw new RequiredError(\n          \"collectionId\",\n          \"Required parameter collectionId was null or undefined when calling updateCollection.\",\n        );\n      }\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling updateCollection.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_id}`.replace(\n        \"{collection_id}\",\n        encodeURIComponent(String(collectionId)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"PUT\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Upsert\n     * @param {string} collectionId\n     * @param {Api.AddEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    upsert(\n      collectionId: string,\n      request: Api.AddEmbedding,\n      options: RequestInit = {},\n    ): FetchArgs {\n      // verify required parameter 'collectionId' is not null or undefined\n      if (collectionId === null || collectionId === undefined) {\n        throw new RequiredError(\n          \"collectionId\",\n          \"Required parameter collectionId was null or undefined when calling upsert.\",\n        );\n      }\n      // verify required parameter 'request' is not null or undefined\n      if (request === null || request === undefined) {\n        throw new RequiredError(\n          \"request\",\n          \"Required parameter request was null or undefined when calling upsert.\",\n        );\n      }\n      let localVarPath = `/api/v1/collections/{collection_id}/upsert`.replace(\n        \"{collection_id}\",\n        encodeURIComponent(String(collectionId)),\n      );\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"POST\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarHeaderParameter.set(\"Content-Type\", \"application/json\");\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      if (request !== undefined) {\n        localVarRequestOptions.body = JSON.stringify(request || {});\n      }\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * @summary Version\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    version(options: RequestInit = {}): FetchArgs {\n      let localVarPath = `/api/v1/version`;\n      const localVarPathQueryStart = localVarPath.indexOf(\"?\");\n      const localVarRequestOptions: RequestInit = Object.assign(\n        { method: \"GET\" },\n        options,\n      );\n      const localVarHeaderParameter: Headers = options.headers\n        ? new Headers(options.headers)\n        : new Headers();\n      const localVarQueryParameter = new URLSearchParams(\n        localVarPathQueryStart !== -1\n          ? localVarPath.substring(localVarPathQueryStart + 1)\n          : \"\",\n      );\n      if (localVarPathQueryStart !== -1) {\n        localVarPath = localVarPath.substring(0, localVarPathQueryStart);\n      }\n\n      localVarRequestOptions.headers = localVarHeaderParameter;\n\n      const localVarQueryParameterString = localVarQueryParameter.toString();\n      if (localVarQueryParameterString) {\n        localVarPath += \"?\" + localVarQueryParameterString;\n      }\n      return {\n        url: localVarPath,\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * ApiApi - functional programming interface\n * @export\n */\nexport const ApiApiFp = function (configuration?: Configuration) {\n  return {\n    /**\n     * @summary Add\n     * @param {string} collectionId\n     * @param {Api.AddEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    add(\n      collectionId: string,\n      request: Api.AddEmbedding,\n      options?: RequestInit,\n    ): (fetch?: FetchAPI, basePath?: string) => Promise<Api.Add201Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).add(\n        collectionId,\n        request,\n        options,\n      );\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 201) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Delete\n     * @param {string} collectionId\n     * @param {Api.DeleteEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    aDelete(\n      collectionId: string,\n      request: Api.DeleteEmbedding,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.ADelete200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).aDelete(\n        collectionId,\n        request,\n        options,\n      );\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Get\n     * @param {string} collectionId\n     * @param {Api.GetEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    aGet(\n      collectionId: string,\n      request: Api.GetEmbedding,\n      options?: RequestInit,\n    ): (fetch?: FetchAPI, basePath?: string) => Promise<Api.AGet200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).aGet(\n        collectionId,\n        request,\n        options,\n      );\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Count\n     * @param {string} collectionId\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    count(\n      collectionId: string,\n      options?: RequestInit,\n    ): (fetch?: FetchAPI, basePath?: string) => Promise<Api.Count200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).count(\n        collectionId,\n        options,\n      );\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Count Collections\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    countCollections(\n      tenant: string | undefined,\n      database: string | undefined,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.CountCollections200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).countCollections(tenant, database, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Create Collection\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {Api.CreateCollection} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCollection(\n      tenant: string | undefined,\n      database: string | undefined,\n      request: Api.CreateCollection,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.CreateCollection200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).createCollection(tenant, database, request, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Create Database\n     * @param {string} [tenant]\n     * @param {Api.CreateDatabase} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createDatabase(\n      tenant: string | undefined,\n      request: Api.CreateDatabase,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.CreateDatabase200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).createDatabase(tenant, request, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Create Tenant\n     * @param {Api.CreateTenant} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createTenant(\n      request: Api.CreateTenant,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.CreateTenant200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).createTenant(request, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Delete Collection\n     * @param {string} collectionName\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteCollection(\n      collectionName: string,\n      tenant: string | undefined,\n      database: string | undefined,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.DeleteCollection200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).deleteCollection(collectionName, tenant, database, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Get Collection\n     * @param {string} collectionName\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getCollection(\n      collectionName: string,\n      tenant: string | undefined,\n      database: string | undefined,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.GetCollection200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).getCollection(collectionName, tenant, database, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Get Database\n     * @param {string} database\n     * @param {string} [tenant]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getDatabase(\n      database: string,\n      tenant: string | undefined,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.GetDatabase200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).getDatabase(database, tenant, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Get Nearest Neighbors\n     * @param {string} collectionId\n     * @param {Api.QueryEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getNearestNeighbors(\n      collectionId: string,\n      request: Api.QueryEmbedding,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.GetNearestNeighbors200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).getNearestNeighbors(collectionId, request, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Get Tenant\n     * @param {string} tenant\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    getTenant(\n      tenant: string,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.GetTenant200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).getTenant(tenant, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Heartbeat\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    heartbeat(\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<{ [name: string]: number }> {\n      const localVarFetchArgs =\n        ApiApiFetchParamCreator(configuration).heartbeat(options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary List Collections\n     * @param {number | null} [limit]\n     * @param {number | null} [offset]\n     * @param {string} [tenant]\n     * @param {string} [database]\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listCollections(\n      limit: number | null | undefined,\n      offset: number | null | undefined,\n      tenant: string | undefined,\n      database: string | undefined,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.ListCollections200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).listCollections(limit, offset, tenant, database, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Pre Flight Checks\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    preFlightChecks(\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.PreFlightChecks200Response> {\n      const localVarFetchArgs =\n        ApiApiFetchParamCreator(configuration).preFlightChecks(options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Reset\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    reset(\n      options?: RequestInit,\n    ): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {\n      const localVarFetchArgs =\n        ApiApiFetchParamCreator(configuration).reset(options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Root\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    root(\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<{ [name: string]: number }> {\n      const localVarFetchArgs =\n        ApiApiFetchParamCreator(configuration).root(options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Update\n     * @param {string} collectionId\n     * @param {Api.UpdateEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    update(\n      collectionId: string,\n      request: Api.UpdateEmbedding,\n      options?: RequestInit,\n    ): (fetch?: FetchAPI, basePath?: string) => Promise<Api.Update200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).update(\n        collectionId,\n        request,\n        options,\n      );\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Update Collection\n     * @param {string} collectionId\n     * @param {Api.UpdateCollection} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    updateCollection(\n      collectionId: string,\n      request: Api.UpdateCollection,\n      options?: RequestInit,\n    ): (\n      fetch?: FetchAPI,\n      basePath?: string,\n    ) => Promise<Api.UpdateCollection200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(\n        configuration,\n      ).updateCollection(collectionId, request, options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Upsert\n     * @param {string} collectionId\n     * @param {Api.AddEmbedding} request\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    upsert(\n      collectionId: string,\n      request: Api.AddEmbedding,\n      options?: RequestInit,\n    ): (fetch?: FetchAPI, basePath?: string) => Promise<Api.Upsert200Response> {\n      const localVarFetchArgs = ApiApiFetchParamCreator(configuration).upsert(\n        collectionId,\n        request,\n        options,\n      );\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          if (response.status === 422) {\n            if (mimeType === \"application/json\") {\n              throw response;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n    /**\n     * @summary Version\n     * @param {RequestInit} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    version(\n      options?: RequestInit,\n    ): (fetch?: FetchAPI, basePath?: string) => Promise<string> {\n      const localVarFetchArgs =\n        ApiApiFetchParamCreator(configuration).version(options);\n      return (fetch: FetchAPI = defaultFetch, basePath: string = BASE_PATH) => {\n        return fetch(\n          basePath + localVarFetchArgs.url,\n          localVarFetchArgs.options,\n        ).then((response) => {\n          const contentType = response.headers.get(\"Content-Type\");\n          const mimeType = contentType\n            ? contentType.replace(/;.*/, \"\")\n            : undefined;\n\n          if (response.status === 200) {\n            if (mimeType === \"application/json\") {\n              return response.json() as any;\n            }\n            throw response;\n          }\n          throw response;\n        });\n      };\n    },\n  };\n};\n\n/**\n * ApiApi - factory interface\n * @export\n */\nexport const ApiApiFactory: FactoryFunction<ApiApi> = function (\n  configuration?: Configuration,\n  basePath?: string,\n  fetch?: FetchAPI,\n) {\n  return new ApiApi(configuration, basePath, fetch);\n};\n\n/**\n * ApiApi - object-oriented interface\n * @export\n * @class ApiApi\n * @extends {BaseAPI}\n */\nexport class ApiApi extends BaseAPI {\n  /**\n   * @summary Add\n   * @param {string} collectionId\n   * @param {Api.AddEmbedding} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public add(\n    collectionId: string,\n    request: Api.AddEmbedding,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).add(\n      collectionId,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Delete\n   * @param {string} collectionId\n   * @param {Api.DeleteEmbedding} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public aDelete(\n    collectionId: string,\n    request: Api.DeleteEmbedding,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).aDelete(\n      collectionId,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Get\n   * @param {string} collectionId\n   * @param {Api.GetEmbedding} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public aGet(\n    collectionId: string,\n    request: Api.GetEmbedding,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).aGet(\n      collectionId,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Count\n   * @param {string} collectionId\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public count(collectionId: string, options?: RequestInit) {\n    return ApiApiFp(this.configuration).count(collectionId, options)(\n      this.fetch,\n      this.basePath,\n    );\n  }\n\n  /**\n   * @summary Count Collections\n   * @param {string} [tenant]\n   * @param {string} [database]\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public countCollections(\n    tenant: string | undefined,\n    database: string | undefined,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).countCollections(\n      tenant,\n      database,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Create Collection\n   * @param {string} [tenant]\n   * @param {string} [database]\n   * @param {Api.CreateCollection} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public createCollection(\n    tenant: string | undefined,\n    database: string | undefined,\n    request: Api.CreateCollection,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).createCollection(\n      tenant,\n      database,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Create Database\n   * @param {string} [tenant]\n   * @param {Api.CreateDatabase} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public createDatabase(\n    tenant: string | undefined,\n    request: Api.CreateDatabase,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).createDatabase(\n      tenant,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Create Tenant\n   * @param {Api.CreateTenant} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public createTenant(request: Api.CreateTenant, options?: RequestInit) {\n    return ApiApiFp(this.configuration).createTenant(request, options)(\n      this.fetch,\n      this.basePath,\n    );\n  }\n\n  /**\n   * @summary Delete Collection\n   * @param {string} collectionName\n   * @param {string} [tenant]\n   * @param {string} [database]\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public deleteCollection(\n    collectionName: string,\n    tenant: string | undefined,\n    database: string | undefined,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).deleteCollection(\n      collectionName,\n      tenant,\n      database,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Get Collection\n   * @param {string} collectionName\n   * @param {string} [tenant]\n   * @param {string} [database]\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public getCollection(\n    collectionName: string,\n    tenant: string | undefined,\n    database: string | undefined,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).getCollection(\n      collectionName,\n      tenant,\n      database,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Get Database\n   * @param {string} database\n   * @param {string} [tenant]\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public getDatabase(\n    database: string,\n    tenant: string | undefined,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).getDatabase(\n      database,\n      tenant,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Get Nearest Neighbors\n   * @param {string} collectionId\n   * @param {Api.QueryEmbedding} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public getNearestNeighbors(\n    collectionId: string,\n    request: Api.QueryEmbedding,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).getNearestNeighbors(\n      collectionId,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Get Tenant\n   * @param {string} tenant\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public getTenant(tenant: string, options?: RequestInit) {\n    return ApiApiFp(this.configuration).getTenant(tenant, options)(\n      this.fetch,\n      this.basePath,\n    );\n  }\n\n  /**\n   * @summary Heartbeat\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public heartbeat(options?: RequestInit) {\n    return ApiApiFp(this.configuration).heartbeat(options)(\n      this.fetch,\n      this.basePath,\n    );\n  }\n\n  /**\n   * @summary List Collections\n   * @param {number | null} [limit]\n   * @param {number | null} [offset]\n   * @param {string} [tenant]\n   * @param {string} [database]\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public listCollections(\n    limit: number | null | undefined,\n    offset: number | null | undefined,\n    tenant: string | undefined,\n    database: string | undefined,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).listCollections(\n      limit,\n      offset,\n      tenant,\n      database,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Pre Flight Checks\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public preFlightChecks(options?: RequestInit) {\n    return ApiApiFp(this.configuration).preFlightChecks(options)(\n      this.fetch,\n      this.basePath,\n    );\n  }\n\n  /**\n   * @summary Reset\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public reset(options?: RequestInit) {\n    return ApiApiFp(this.configuration).reset(options)(\n      this.fetch,\n      this.basePath,\n    );\n  }\n\n  /**\n   * @summary Root\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public root(options?: RequestInit) {\n    return ApiApiFp(this.configuration).root(options)(\n      this.fetch,\n      this.basePath,\n    );\n  }\n\n  /**\n   * @summary Update\n   * @param {string} collectionId\n   * @param {Api.UpdateEmbedding} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public update(\n    collectionId: string,\n    request: Api.UpdateEmbedding,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).update(\n      collectionId,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Update Collection\n   * @param {string} collectionId\n   * @param {Api.UpdateCollection} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public updateCollection(\n    collectionId: string,\n    request: Api.UpdateCollection,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).updateCollection(\n      collectionId,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Upsert\n   * @param {string} collectionId\n   * @param {Api.AddEmbedding} request\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public upsert(\n    collectionId: string,\n    request: Api.AddEmbedding,\n    options?: RequestInit,\n  ) {\n    return ApiApiFp(this.configuration).upsert(\n      collectionId,\n      request,\n      options,\n    )(this.fetch, this.basePath);\n  }\n\n  /**\n   * @summary Version\n   * @param {RequestInit} [options] Override http request option.\n   * @throws {RequiredError}\n   */\n  public version(options?: RequestInit) {\n    return ApiApiFp(this.configuration).version(options)(\n      this.fetch,\n      this.basePath,\n    );\n  }\n}\n\n/**\n * We sometimes represent dates as strings (in models) and as Dates (in parameters) so this\n * function converts them both to a string.\n */\nfunction dateToString(value: Date | string | undefined): string | undefined {\n  if (value instanceof Date) {\n    return value.toISOString();\n  } else if (typeof value === \"string\") {\n    return value;\n  } else {\n    return undefined;\n  }\n}\n","/* eslint-disable */\n// tslint:disable\n/**\n * FastAPI\n *\n *\n * OpenAPI spec version: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */\n\nexport namespace Api {\n  export interface Add201Response {}\n\n  export interface AddEmbedding {\n    embeddings?: Api.AddEmbedding.Embedding[] | null;\n    metadatas?: (Api.AddEmbedding.Metadatum | null)[] | null;\n    documents?: (string | null)[] | null;\n    uris?: (string | null)[] | null;\n    ids: string[];\n  }\n\n  /**\n   * @export\n   * @namespace AddEmbedding\n   */\n  export namespace AddEmbedding {\n    export interface Embedding {}\n\n    export interface Metadatum {}\n  }\n\n  export interface ADelete200Response {}\n\n  export interface AGet200Response {}\n\n  export interface Count200Response {}\n\n  export interface CountCollections200Response {}\n\n  export interface CreateCollection {\n    name: string;\n    configuration: Api.CreateCollection.Configuration | null;\n    metadata?: Api.CreateCollection.Metadata | null;\n    get_or_create?: boolean;\n  }\n\n  /**\n   * @export\n   * @namespace CreateCollection\n   */\n  export namespace CreateCollection {\n    export interface Configuration {}\n\n    export interface Metadata {}\n  }\n\n  export interface CreateCollection200Response {}\n\n  export interface CreateDatabase {\n    name: string;\n  }\n\n  export interface CreateDatabase200Response {}\n\n  export interface CreateTenant {\n    name: string;\n  }\n\n  export interface CreateTenant200Response {}\n\n  export interface DeleteCollection200Response {}\n\n  export interface DeleteEmbedding {\n    ids?: string[] | null;\n    where?: Api.DeleteEmbedding.Where | null;\n    where_document?: Api.DeleteEmbedding.WhereDocument | null;\n  }\n\n  /**\n   * @export\n   * @namespace DeleteEmbedding\n   */\n  export namespace DeleteEmbedding {\n    export interface Where {}\n\n    export interface WhereDocument {}\n  }\n\n  export interface GetCollection200Response {}\n\n  export interface GetDatabase200Response {}\n\n  export interface GetEmbedding {\n    ids?: string[] | null;\n    where?: Api.GetEmbedding.Where | null;\n    where_document?: Api.GetEmbedding.WhereDocument | null;\n    sort?: string | null;\n    /**\n     * @type {number | null}\n     * @memberof GetEmbedding\n     */\n    limit?: number | null;\n    /**\n     * @type {number | null}\n     * @memberof GetEmbedding\n     */\n    offset?: number | null;\n    include?: Api.IncludeEnum[];\n  }\n\n  /**\n   * @export\n   * @namespace GetEmbedding\n   */\n  export namespace GetEmbedding {\n    export interface Where {}\n\n    export interface WhereDocument {}\n  }\n\n  export interface GetNearestNeighbors200Response {}\n\n  export interface GetTenant200Response {}\n\n  export interface HTTPValidationError {\n    detail?: Api.ValidationError[];\n  }\n\n  export enum IncludeEnum {\n    Documents = \"documents\",\n    Embeddings = \"embeddings\",\n    Metadatas = \"metadatas\",\n    Distances = \"distances\",\n    Uris = \"uris\",\n    Data = \"data\",\n  }\n\n  export interface ListCollections200Response {}\n\n  export interface PreFlightChecks200Response {}\n\n  export interface QueryEmbedding {\n    where?: Api.QueryEmbedding.Where | null;\n    where_document?: Api.QueryEmbedding.WhereDocument | null;\n    query_embeddings: Api.QueryEmbedding.QueryEmbedding2[];\n    /**\n     * @type {number}\n     * @memberof QueryEmbedding\n     */\n    n_results?: number;\n    include?: Api.IncludeEnum[];\n  }\n\n  /**\n   * @export\n   * @namespace QueryEmbedding\n   */\n  export namespace QueryEmbedding {\n    export interface Where {}\n\n    export interface WhereDocument {}\n\n    export interface QueryEmbedding2 {}\n  }\n\n  export interface Update200Response {}\n\n  export interface UpdateCollection {\n    new_name?: string | null;\n    new_metadata?: Api.UpdateCollection.NewMetadata | null;\n  }\n\n  /**\n   * @export\n   * @namespace UpdateCollection\n   */\n  export namespace UpdateCollection {\n    export interface NewMetadata {}\n  }\n\n  export interface UpdateCollection200Response {}\n\n  export interface UpdateEmbedding {\n    embeddings?: Api.UpdateEmbedding.Embedding[] | null;\n    metadatas?: (Api.UpdateEmbedding.Metadatum | null)[] | null;\n    documents?: (string | null)[] | null;\n    uris?: (string | null)[] | null;\n    ids: string[];\n  }\n\n  /**\n   * @export\n   * @namespace UpdateEmbedding\n   */\n  export namespace UpdateEmbedding {\n    export interface Embedding {}\n\n    export interface Metadatum {}\n  }\n\n  export interface Upsert200Response {}\n\n  export interface ValidationError {\n    loc: (string | number)[];\n    msg: string;\n    type: string;\n  }\n}\n","/* eslint-disable */\n// tslint:disable\n/**\n * FastAPI\n *\n *\n * OpenAPI spec version: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator+.\n * https://github.com/karlvr/openapi-generator-plus\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n  apiKey?: string | ((name: string) => string | null);\n  username?: string;\n  password?: string;\n  authorization?: string | ((name: string, scopes?: string[]) => string | null);\n  basePath?: string;\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?: string | ((name: string) => string | null);\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  username?: string;\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  password?: string;\n  /**\n   * parameter for oauth2, openIdConnect or http security\n   * @param name security name\n   * @param scopes oauth2 scopes\n   * @memberof Configuration\n   */\n  authorization?: string | ((name: string, scopes?: string[]) => string | null);\n  /**\n   * override base path\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string;\n\n  constructor(param: ConfigurationParameters = {}) {\n    this.apiKey = param.apiKey;\n    this.username = param.username;\n    this.password = param.password;\n    this.authorization = param.authorization;\n    this.basePath = param.basePath;\n  }\n}\n","/**\n * This is a generic Chroma error.\n */\nexport class ChromaError extends Error {\n  constructor(name: string, message: string, public readonly cause?: unknown) {\n    super(message);\n    this.name = name;\n  }\n}\n\n/**\n * Indicates that there was a problem with the connection to the Chroma server (e.g. the server is down or the client is not connected to the internet)\n */\nexport class ChromaConnectionError extends Error {\n  name = \"ChromaConnectionError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\n/** Indicates that the server encountered an error while handling the request. */\nexport class ChromaServerError extends Error {\n  name = \"ChromaServerError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\n/** Indicate that there was an issue with the request that the client made. */\nexport class ChromaClientError extends Error {\n  name = \"ChromaClientError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\n/** The request lacked valid authentication. */\nexport class ChromaUnauthorizedError extends Error {\n  name = \"ChromaAuthError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\n/** The user does not have permission to access the requested resource. */\nexport class ChromaForbiddenError extends Error {\n  name = \"ChromaForbiddenError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport class ChromaNotFoundError extends Error {\n  name = \"ChromaNotFoundError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport class ChromaValueError extends Error {\n  name = \"ChromaValueError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport class InvalidCollectionError extends Error {\n  name = \"InvalidCollectionError\";\n  constructor(message: string, public readonly cause?: unknown) {\n    super(message);\n  }\n}\n\nexport function createErrorByType(type: string, message: string) {\n  switch (type) {\n    case \"InvalidCollection\":\n      return new InvalidCollectionError(message);\n    default:\n      return undefined;\n  }\n}\n","import { ChromaClient } from \"./ChromaClient\";\nimport { IEmbeddingFunction } from \"./embeddings/IEmbeddingFunction\";\nimport {\n  CollectionMetadata,\n  AddRecordsParams,\n  UpsertRecordsParams,\n  BaseGetParams,\n  GetResponse,\n  UpdateRecordsParams,\n  QueryRecordsParams,\n  MultiQueryResponse,\n  PeekParams,\n  MultiGetResponse,\n  DeleteParams,\n  Embeddings,\n  CollectionParams,\n} from \"./types\";\nimport { prepareRecordRequest, toArray, toArrayOfArrays } from \"./utils\";\nimport { Api as GeneratedApi } from \"./generated\";\n\nexport class Collection {\n  public name: string;\n  public id: string;\n  public metadata: CollectionMetadata | undefined;\n  /**\n   * @ignore\n   */\n  private client: ChromaClient;\n  /**\n   * @ignore\n   */\n  public embeddingFunction: IEmbeddingFunction;\n\n  /**\n   * @ignore\n   */\n  constructor(\n    name: string,\n    id: string,\n    client: ChromaClient,\n    embeddingFunction: IEmbeddingFunction,\n    metadata?: CollectionMetadata,\n  ) {\n    this.name = name;\n    this.id = id;\n    this.metadata = metadata;\n    this.client = client;\n    this.embeddingFunction = embeddingFunction;\n  }\n\n  /**\n   * Add items to the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {ID | IDs} [params.ids] - IDs of the items to add.\n   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.\n   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.\n   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.\n   * @returns {Promise<AddResponse>} - The response from the API. True if successful.\n   *\n   * @example\n   * ```typescript\n   * const response = await collection.add({\n   *   ids: [\"id1\", \"id2\"],\n   *   embeddings: [[1, 2, 3], [4, 5, 6]],\n   *   metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n   *   documents: [\"document1\", \"document2\"]\n   * });\n   * ```\n   */\n  async add(params: AddRecordsParams): Promise<void> {\n    await this.client.init();\n\n    await this.client.api.add(\n      this.id,\n      // TODO: For some reason the auto generated code requires metadata to be defined here.\n      (await prepareRecordRequest(\n        params,\n        this.embeddingFunction,\n      )) as GeneratedApi.AddEmbedding,\n      this.client.api.options,\n    );\n  }\n\n  /**\n   * Upsert items to the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {ID | IDs} [params.ids] - IDs of the items to add.\n   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.\n   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.\n   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.\n   * @returns {Promise<void>}\n   *\n   * @example\n   * ```typescript\n   * const response = await collection.upsert({\n   *   ids: [\"id1\", \"id2\"],\n   *   embeddings: [[1, 2, 3], [4, 5, 6]],\n   *   metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n   *   documents: [\"document1\", \"document2\"],\n   * });\n   * ```\n   */\n  async upsert(params: UpsertRecordsParams): Promise<void> {\n    await this.client.init();\n\n    await this.client.api.upsert(\n      this.id,\n      // TODO: For some reason the auto generated code requires metadata to be defined here.\n      (await prepareRecordRequest(\n        params,\n        this.embeddingFunction,\n      )) as GeneratedApi.AddEmbedding,\n      this.client.api.options,\n    );\n  }\n\n  /**\n   * Count the number of items in the collection\n   * @returns {Promise<number>} - The number of items in the collection.\n   *\n   * @example\n   * ```typescript\n   * const count = await collection.count();\n   * ```\n   */\n  async count(): Promise<number> {\n    await this.client.init();\n    return (await this.client.api.count(\n      this.id,\n      this.client.api.options,\n    )) as number;\n  }\n\n  /**\n   * Get items from the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {ID | IDs} [params.ids] - Optional IDs of the items to get.\n   * @param {Where} [params.where] - Optional where clause to filter items by.\n   * @param {PositiveInteger} [params.limit] - Optional limit on the number of items to get.\n   * @param {PositiveInteger} [params.offset] - Optional offset on the items to get.\n   * @param {IncludeEnum[]} [params.include] - Optional list of items to include in the response.\n   * @param {WhereDocument} [params.whereDocument] - Optional where clause to filter items by.\n   * @returns {Promise<GetResponse>} - The response from the server.\n   *\n   * @example\n   * ```typescript\n   * const response = await collection.get({\n   *   ids: [\"id1\", \"id2\"],\n   *   where: { \"key\": \"value\" },\n   *   limit: 10,\n   *   offset: 0,\n   *   include: [\"embeddings\", \"metadatas\", \"documents\"],\n   *   whereDocument: { $contains: \"value\" },\n   * });\n   * ```\n   */\n  async get({\n    ids,\n    where,\n    limit,\n    offset,\n    include,\n    whereDocument,\n  }: BaseGetParams = {}): Promise<GetResponse> {\n    await this.client.init();\n\n    const idsArray = ids ? toArray(ids) : undefined;\n\n    const resp = (await this.client.api.aGet(\n      this.id,\n      {\n        ids: idsArray,\n        where,\n        limit,\n        offset,\n        include,\n        where_document: whereDocument,\n      },\n      this.client.api.options,\n    )) as MultiGetResponse;\n\n    return resp;\n  }\n\n  /**\n   * Update items in the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {ID | IDs} [params.ids] - IDs of the items to add.\n   * @param {Embedding | Embeddings} [params.embeddings] - Optional embeddings of the items to add.\n   * @param {Metadata | Metadatas} [params.metadatas] - Optional metadata of the items to add.\n   * @param {Document | Documents} [params.documents] - Optional documents of the items to add.\n   * @returns {Promise<void>}\n   *\n   * @example\n   * ```typescript\n   * const response = await collection.update({\n   *   ids: [\"id1\", \"id2\"],\n   *   embeddings: [[1, 2, 3], [4, 5, 6]],\n   *   metadatas: [{ \"key\": \"value\" }, { \"key\": \"value\" }],\n   *   documents: [\"document1\", \"document2\"],\n   * });\n   * ```\n   */\n  async update(params: UpdateRecordsParams): Promise<void> {\n    await this.client.init();\n\n    await this.client.api.update(\n      this.id,\n      await prepareRecordRequest(params, this.embeddingFunction, true),\n      this.client.api.options,\n    );\n  }\n\n  /**\n   * Performs a query on the collection using the specified parameters.\n   *\n   * @param {Object} params - The parameters for the query.\n   * @param {Embedding | Embeddings} [params.queryEmbeddings] - Optional query embeddings to use for the search.\n   * @param {PositiveInteger} [params.nResults] - Optional number of results to return (default is 10).\n   * @param {Where} [params.where] - Optional query condition to filter results based on metadata values.\n   * @param {string | string[]} [params.queryTexts] - Optional query text(s) to search for in the collection.\n   * @param {WhereDocument} [params.whereDocument] - Optional query condition to filter results based on document content.\n   * @param {IncludeEnum[]} [params.include] - Optional array of fields to include in the result, such as \"metadata\" and \"document\".\n   *\n   * @returns {Promise<QueryResponse>} A promise that resolves to the query results.\n   * @throws {Error} If there is an issue executing the query.\n   * @example\n   * // Query the collection using embeddings\n   * const results = await collection.query({\n   *   queryEmbeddings: [[0.1, 0.2, ...], ...],\n   *   nResults: 10,\n   *   where: {\"name\": {\"$eq\": \"John Doe\"}},\n   *   include: [\"metadata\", \"document\"]\n   * });\n   * @example\n   * ```js\n   * // Query the collection using query text\n   * const results = await collection.query({\n   *   queryTexts: \"some text\",\n   *   nResults: 10,\n   *   where: {\"name\": {\"$eq\": \"John Doe\"}},\n   *   include: [\"metadata\", \"document\"]\n   * });\n   * ```\n   *\n   */\n  async query({\n    nResults = 10,\n    where,\n    whereDocument,\n    include,\n    queryTexts,\n    queryEmbeddings,\n  }: QueryRecordsParams): Promise<MultiQueryResponse> {\n    if ((queryTexts && queryEmbeddings) || (!queryTexts && !queryEmbeddings)) {\n      throw new Error(\n        \"You must supply exactly one of queryTexts or queryEmbeddings.\",\n      );\n    }\n\n    await this.client.init();\n\n    const arrayQueryEmbeddings: Embeddings =\n      queryTexts !== undefined\n        ? await this.embeddingFunction.generate(toArray(queryTexts))\n        : toArrayOfArrays<number>(queryEmbeddings);\n\n    return (await this.client.api.getNearestNeighbors(\n      this.id,\n      {\n        query_embeddings: arrayQueryEmbeddings,\n        where,\n        n_results: nResults,\n        where_document: whereDocument,\n        include,\n      },\n      this.client.api.options,\n    )) as MultiQueryResponse;\n  }\n\n  /**\n   * Modify the collection name or metadata\n   * @param {Object} params - The parameters for the query.\n   * @param {string} [params.name] - Optional new name for the collection.\n   * @param {CollectionMetadata} [params.metadata] - Optional new metadata for the collection.\n   * @returns {Promise<void>} - The response from the API.\n   *\n   * @example\n   * ```typescript\n   * const response = await client.updateCollection({\n   *   name: \"new name\",\n   *   metadata: { \"key\": \"value\" },\n   * });\n   * ```\n   */\n  async modify({\n    name,\n    metadata,\n  }: {\n    name?: string;\n    metadata?: CollectionMetadata;\n  }): Promise<CollectionParams> {\n    await this.client.init();\n    return this.client.api\n      .updateCollection(\n        this.id,\n        {\n          new_name: name,\n          new_metadata: metadata,\n        },\n        this.client.api.options,\n      )\n      .then(() => {\n        if (name !== undefined) {\n          this.name = name;\n        }\n        if (metadata !== undefined) {\n          this.metadata = metadata;\n        }\n        return {\n          name: this.name,\n          metadata: this.metadata,\n        } as CollectionParams;\n      });\n  }\n\n  /**\n   * Peek inside the collection\n   * @param {Object} params - The parameters for the query.\n   * @param {PositiveInteger} [params.limit] - Optional number of results to return (default is 10).\n   * @returns {Promise<GetResponse>} A promise that resolves to the query results.\n   * @throws {Error} If there is an issue executing the query.\n   *\n   * @example\n   * ```typescript\n   * const results = await collection.peek({\n   *   limit: 10\n   * });\n   * ```\n   */\n  async peek({ limit = 10 }: PeekParams = {}): Promise<MultiGetResponse> {\n    await this.client.init();\n    return (await this.client.api.aGet(\n      this.id,\n      {\n        limit,\n      },\n      this.client.api.options,\n    )) as MultiGetResponse;\n  }\n\n  /**\n   * Deletes items from the collection.\n   * @param {Object} params - The parameters for deleting items from the collection.\n   * @param {ID | IDs} [params.ids] - Optional ID or array of IDs of items to delete.\n   * @param {Where} [params.where] - Optional query condition to filter items to delete based on metadata values.\n   * @param {WhereDocument} [params.whereDocument] - Optional query condition to filter items to delete based on document content.\n   * @returns {Promise<string[]>} A promise that resolves to the IDs of the deleted items.\n   * @throws {Error} If there is an issue deleting items from the collection.\n   *\n   * @example\n   * ```typescript\n   * const results = await collection.delete({\n   *   ids: \"some_id\",\n   *   where: {\"name\": {\"$eq\": \"John Doe\"}},\n   *   whereDocument: {\"$contains\":\"search_string\"}\n   * });\n   * ```\n   */\n  async delete({ ids, where, whereDocument }: DeleteParams = {}): Promise<\n    string[]\n  > {\n    await this.client.init();\n    let idsArray = undefined;\n    if (ids !== undefined) idsArray = toArray(ids);\n    return (await this.client.api.aDelete(\n      this.id,\n      { ids: idsArray, where: where, where_document: whereDocument },\n      this.client.api.options,\n    )) as string[];\n  }\n}\n","import { AdminClient } from \"./AdminClient\";\nimport { ChromaClient } from \"./ChromaClient\";\nimport { ChromaConnectionError } from \"./Errors\";\nimport { IEmbeddingFunction } from \"./embeddings/IEmbeddingFunction\";\nimport {\n  AddRecordsParams,\n  BaseRecordOperationParams,\n  CollectionParams,\n  Metadata,\n  MultiRecordOperationParams,\n  UpdateRecordsParams,\n} from \"./types\";\nimport { Collection } from \"./Collection\";\n\n// a function to convert a non-Array object to an Array\nexport function toArray<T>(obj: T | T[]): Array<T> {\n  if (Array.isArray(obj)) {\n    return obj;\n  } else {\n    return [obj] as T[];\n  }\n}\n\n// a function to convert an array to array of arrays\nexport function toArrayOfArrays<T>(\n  obj: Array<Array<T>> | Array<T>,\n): Array<Array<T>> {\n  if (Array.isArray(obj[0])) {\n    return obj as Array<Array<T>>;\n  } else {\n    return [obj] as Array<Array<T>>;\n  }\n}\n\n/**\n * Dynamically imports a specified module, providing a workaround for browser environments.\n * This function is necessary because we dynamically import optional dependencies\n * which can cause issues with bundlers that detect the import and throw an error\n * on build time when the dependency is not installed.\n * Using this workaround, the dynamic import is only evaluated on runtime\n * where we work with try-catch when importing optional dependencies.\n *\n * @param {string} moduleName - Specifies the module to import.\n * @returns {Promise<any>} Returns a Promise that resolves to the imported module.\n */\nexport async function importOptionalModule(moduleName: string) {\n  return Function(`return import(\"${moduleName}\")`)();\n}\n\nexport async function validateTenantDatabase(\n  adminClient: AdminClient,\n  tenant: string,\n  database: string,\n): Promise<void> {\n  try {\n    await adminClient.getTenant({ name: tenant });\n  } catch (error) {\n    if (error instanceof ChromaConnectionError) {\n      throw error;\n    }\n    throw new Error(\n      `Could not connect to tenant ${tenant}. Are you sure it exists? Underlying error:\n${error}`,\n    );\n  }\n\n  try {\n    await adminClient.getDatabase({ name: database, tenantName: tenant });\n  } catch (error) {\n    if (error instanceof ChromaConnectionError) {\n      throw error;\n    }\n    throw new Error(\n      `Could not connect to database ${database} for tenant ${tenant}. Are you sure it exists? Underlying error:\n${error}`,\n    );\n  }\n}\n\nexport function isBrowser() {\n  return (\n    typeof window !== \"undefined\" && typeof window.document !== \"undefined\"\n  );\n}\n\nfunction arrayifyParams(\n  params: BaseRecordOperationParams,\n): MultiRecordOperationParams {\n  return {\n    ids: toArray(params.ids),\n    embeddings: params.embeddings\n      ? toArrayOfArrays(params.embeddings)\n      : undefined,\n    metadatas: params.metadatas\n      ? toArray<Metadata>(params.metadatas)\n      : undefined,\n    documents: params.documents ? toArray(params.documents) : undefined,\n  };\n}\n\nexport async function prepareRecordRequest(\n  reqParams: AddRecordsParams | UpdateRecordsParams,\n  embeddingFunction: IEmbeddingFunction,\n  update?: true,\n): Promise<MultiRecordOperationParams> {\n  const { ids, embeddings, metadatas, documents } = arrayifyParams(reqParams);\n\n  if (!embeddings && !documents && !update) {\n    throw new Error(\"embeddings and documents cannot both be undefined\");\n  }\n\n  const embeddingsArray = embeddings\n    ? embeddings\n    : documents\n    ? await embeddingFunction.generate(documents)\n    : undefined;\n\n  if (!embeddingsArray && !update) {\n    throw new Error(\"Failed to generate embeddings for your request.\");\n  }\n\n  for (let i = 0; i < ids.length; i += 1) {\n    if (typeof ids[i] !== \"string\") {\n      throw new Error(\n        `Expected ids to be strings, found ${typeof ids[i]} at index ${i}`,\n      );\n    }\n  }\n\n  if (\n    (embeddingsArray !== undefined && ids.length !== embeddingsArray.length) ||\n    (metadatas !== undefined && ids.length !== metadatas.length) ||\n    (documents !== undefined && ids.length !== documents.length)\n  ) {\n    throw new Error(\n      \"ids, embeddings, metadatas, and documents must all be the same length\",\n    );\n  }\n\n  const uniqueIds = new Set(ids);\n  if (uniqueIds.size !== ids.length) {\n    const duplicateIds = ids.filter(\n      (item, index) => ids.indexOf(item) !== index,\n    );\n    throw new Error(\n      `ID's must be unique, found duplicates for: ${duplicateIds}`,\n    );\n  }\n\n  return {\n    ids,\n    metadatas,\n    documents,\n    embeddings: embeddingsArray,\n  };\n}\n\nexport function wrapCollection(\n  api: ChromaClient,\n  collection: CollectionParams,\n): Collection {\n  return new Collection(\n    collection.name,\n    collection.id,\n    api,\n    collection.embeddingFunction,\n    collection.metadata,\n  );\n}\n","export type AuthHeaders = { [header: string]: string };\ntype TokenHeaderType = \"AUTHORIZATION\" | \"X_CHROMA_TOKEN\";\n\nexport type AuthOptions = {\n  provider: ClientAuthProvider | string | undefined;\n  credentials?: any | undefined;\n\n  // Only relevant for token auth\n  tokenHeaderType?: TokenHeaderType | undefined;\n};\n\nexport const tokenHeaderTypeToHeaderKey = (\n  headerType: TokenHeaderType,\n): string => {\n  if (headerType === \"AUTHORIZATION\") {\n    return \"Authorization\";\n  } else {\n    return \"X-Chroma-Token\";\n  }\n};\n\nconst base64Encode = (str: string): string => {\n  return Buffer.from(str).toString(\"base64\");\n};\n\nexport interface ClientAuthProvider {\n  /**\n   * Abstract method for authenticating a client.\n   */\n  authenticate(): AuthHeaders;\n}\n\nexport class BasicAuthClientProvider implements ClientAuthProvider {\n  private readonly credentials: AuthHeaders;\n\n  /**\n   * Creates a new BasicAuthClientProvider.\n   * @param textCredentials - The credentials for the authentication provider. Must be of the form \"username:password\". If not supplied, the environment variable CHROMA_CLIENT_AUTH_CREDENTIALS will be used.\n   * @throws {Error} If neither credentials provider or text credentials are supplied.\n   */\n  constructor(textCredentials: string | undefined) {\n    const creds = textCredentials ?? process.env.CHROMA_CLIENT_AUTH_CREDENTIALS;\n    if (creds === undefined) {\n      throw new Error(\n        \"Credentials must be supplied via environment variable (CHROMA_CLIENT_AUTH_CREDENTIALS) or passed in as configuration.\",\n      );\n    }\n    this.credentials = {\n      Authorization: \"Basic \" + base64Encode(creds),\n    };\n  }\n\n  authenticate(): AuthHeaders {\n    return this.credentials;\n  }\n}\n\nexport class TokenAuthClientProvider implements ClientAuthProvider {\n  private readonly credentials: AuthHeaders;\n\n  constructor(\n    textCredentials: any,\n    headerType: TokenHeaderType = \"AUTHORIZATION\",\n  ) {\n    const creds = textCredentials ?? process.env.CHROMA_CLIENT_AUTH_CREDENTIALS;\n    if (creds === undefined) {\n      throw new Error(\n        \"Credentials must be supplied via environment variable (CHROMA_CLIENT_AUTH_CREDENTIALS) or passed in as configuration.\",\n      );\n    }\n\n    const headerKey: string = tokenHeaderTypeToHeaderKey(headerType);\n    const headerVal =\n      headerType === \"AUTHORIZATION\" ? `Bearer ${creds}` : creds;\n    this.credentials = {};\n    this.credentials[headerKey] = headerVal;\n  }\n\n  authenticate(): AuthHeaders {\n    return this.credentials;\n  }\n}\n\nexport const authOptionsToAuthProvider = (\n  auth: AuthOptions,\n): ClientAuthProvider => {\n  if (auth.provider === undefined) {\n    throw new Error(\"Auth provider not specified\");\n  }\n  if (auth.credentials === undefined) {\n    throw new Error(\"Auth credentials not specified\");\n  }\n  switch (auth.provider) {\n    case \"basic\":\n      return new BasicAuthClientProvider(auth.credentials);\n    case \"token\":\n      return new TokenAuthClientProvider(\n        auth.credentials,\n        auth.tokenHeaderType,\n      );\n      break;\n    default:\n      throw new Error(\"Invalid auth provider\");\n  }\n};\n","import {\n  ChromaUnauthorizedError,\n  ChromaClientError,\n  ChromaConnectionError,\n  ChromaForbiddenError,\n  ChromaNotFoundError,\n  ChromaServerError,\n  ChromaValueError,\n  ChromaError,\n  createErrorByType,\n} from \"./Errors\";\nimport { FetchAPI } from \"./generated\";\n\nfunction isOfflineError(error: any): boolean {\n  return Boolean(\n    (error?.name === \"TypeError\" || error?.name === \"FetchError\") &&\n      (error.message?.includes(\"fetch failed\") ||\n        error.message?.includes(\"Failed to fetch\") ||\n        error.message?.includes(\"ENOTFOUND\")),\n  );\n}\n\nfunction parseServerError(error: string | undefined): Error {\n  const regex = /(\\w+)\\('(.+)'\\)/;\n  const match = error?.match(regex);\n  if (match) {\n    const [, name, message] = match;\n    switch (name) {\n      case \"ValueError\":\n        return new ChromaValueError(message);\n      default:\n        return new ChromaError(name, message);\n    }\n  }\n  return new ChromaServerError(\n    \"The server encountered an error while handling the request.\",\n  );\n}\n\n/** This utility allows a single entrypoint for custom error handling logic\n *  that works across all ChromaClient methods.\n *\n *  It is intended to be passed to the ApiApi constructor.\n */\nexport const chromaFetch: FetchAPI = async (\n  input: RequestInfo | URL,\n  init?: RequestInit,\n): Promise<Response> => {\n  try {\n    const resp = await fetch(input, init);\n\n    const clonedResp = resp.clone();\n    const respBody = await clonedResp.json();\n    if (!clonedResp.ok) {\n      const error = createErrorByType(respBody?.error, respBody?.message);\n      if (error) {\n        throw error;\n      }\n      switch (resp.status) {\n        case 400:\n          throw new ChromaClientError(\n            `Bad request to ${input} with status: ${resp.statusText}`,\n          );\n        case 401:\n          throw new ChromaUnauthorizedError(`Unauthorized`);\n        case 403:\n          throw new ChromaForbiddenError(\n            `You do not have permission to access the requested resource.`,\n          );\n        case 404:\n          throw new ChromaNotFoundError(\n            `The requested resource could not be found: ${input}`,\n          );\n        case 500:\n          throw parseServerError(respBody?.error);\n        case 502:\n        case 503:\n        case 504:\n          throw new ChromaConnectionError(\n            `Unable to connect to the chromadb server. Please try again later.`,\n          );\n      }\n      throw new Error(\n        `Failed to fetch ${input} with status ${resp.status}: ${resp.statusText}`,\n      );\n    }\n\n    if (respBody?.error) {\n      throw parseServerError(respBody.error);\n    }\n\n    return resp;\n  } catch (error) {\n    if (isOfflineError(error)) {\n      throw new ChromaConnectionError(\n        \"Failed to connect to chromadb. Make sure your server is running and try again. If you are running from a browser, make sure that your chromadb instance is configured to allow requests from the current origin using the CHROMA_SERVER_CORS_ALLOW_ORIGINS environment variable.\",\n        error,\n      );\n    }\n    throw error;\n  }\n};\n","import { Configuration, ApiApi as DefaultApi } from \"./generated\";\nimport { validateTenantDatabase } from \"./utils\";\nimport { ConfigOptions } from \"./types\";\nimport {\n  AuthOptions,\n  authOptionsToAuthProvider,\n  ClientAuthProvider,\n} from \"./auth\";\nimport { chromaFetch } from \"./ChromaFetch\";\n\nconst DEFAULT_TENANT = \"default_tenant\";\nconst DEFAULT_DATABASE = \"default_database\";\n\n// interface for tenant\ninterface Tenant {\n  name: string;\n}\n\n// interface for tenant\ninterface Database {\n  name: string;\n}\n\nexport class AdminClient {\n  /**\n   * @ignore\n   */\n  private api: DefaultApi & ConfigOptions;\n  private authProvider: ClientAuthProvider | undefined;\n  public tenant: string = DEFAULT_TENANT;\n  public database: string = DEFAULT_DATABASE;\n\n  /**\n   * Creates a new AdminClient instance.\n   * @param {Object} params - The parameters for creating a new client\n   * @param {string} [params.path] - The base path for the Chroma API.\n   * @returns {AdminClient} A new AdminClient instance.\n   *\n   * @example\n   * ```typescript\n   * const client = new AdminClient({\n   *   path: \"http://localhost:8000\"\n   * });\n   * ```\n   */\n  constructor({\n    path,\n    fetchOptions,\n    auth,\n    tenant = DEFAULT_TENANT,\n    database = DEFAULT_DATABASE,\n  }: {\n    path?: string;\n    fetchOptions?: RequestInit;\n    auth?: AuthOptions;\n    tenant?: string;\n    database?: string;\n  } = {}) {\n    if (path === undefined) path = \"http://localhost:8000\";\n    this.tenant = tenant;\n    this.database = database;\n    this.authProvider = undefined;\n\n    const apiConfig: Configuration = new Configuration({\n      basePath: path,\n    });\n\n    this.api = new DefaultApi(apiConfig, undefined, chromaFetch);\n    this.api.options = fetchOptions ?? {};\n\n    if (auth !== undefined) {\n      this.authProvider = authOptionsToAuthProvider(auth);\n      this.api.options.headers = {\n        ...this.api.options.headers,\n        ...this.authProvider.authenticate(),\n      };\n    }\n  }\n\n  /**\n   * Sets the tenant and database for the client.\n   *\n   * @param {Object} params - The parameters for setting tenant and database.\n   * @param {string} params.tenant - The name of the tenant.\n   * @param {string} params.database - The name of the database.\n   *\n   * @returns {Promise<void>} A promise that returns nothing\n   * @throws {Error} Any issues\n   *\n   * @example\n   * ```typescript\n   * await adminClient.setTenant({\n   *   tenant: \"my_tenant\",\n   *   database: \"my_database\",\n   * });\n   * ```\n   */\n  public async setTenant({\n    tenant = DEFAULT_TENANT,\n    database = DEFAULT_DATABASE,\n  }: {\n    tenant: string;\n    database?: string;\n  }): Promise<void> {\n    await validateTenantDatabase(this, tenant, database);\n    this.tenant = tenant;\n    this.database = database;\n  }\n\n  /**\n   * Sets the database for the client.\n   *\n   * @param {Object} params - The parameters for setting the database.\n   * @param {string} params.database - The name of the database.\n   *\n   * @returns {Promise<void>} A promise that returns nothing\n   * @throws {Error} Any issues\n   *\n   * @example\n   * ```typescript\n   * await adminClient.setDatabase({\n   *   database: \"my_database\",\n   * });\n   * ```\n   */\n  public async setDatabase({\n    database = DEFAULT_DATABASE,\n  }: {\n    database?: string;\n  }): Promise<void> {\n    await validateTenantDatabase(this, this.tenant, database);\n    this.database = database;\n  }\n\n  /**\n   * Creates a new tenant with the specified properties.\n   *\n   * @param {Object} params - The parameters for creating a new tenant.\n   * @param {string} params.name - The name of the tenant.\n   *\n   * @returns {Promise<Tenant>} A promise that resolves to the created tenant.\n   * @throws {Error} If there is an issue creating the tenant.\n   *\n   * @example\n   * ```typescript\n   * await adminClient.createTenant({\n   *   name: \"my_tenant\",\n   * });\n   * ```\n   */\n  public async createTenant({ name }: { name: string }): Promise<Tenant> {\n    await this.api.createTenant({ name }, this.api.options);\n\n    return { name };\n  }\n\n  /**\n   * Gets a tenant with the specified properties.\n   *\n   * @param {Object} params - The parameters for getting a tenant.\n   * @param {string} params.name - The name of the tenant.\n   *\n   * @returns {Promise<Tenant>} A promise that resolves to the tenant.\n   * @throws {Error} If there is an issue getting the tenant.\n   *\n   * @example\n   * ```typescript\n   * await adminClient.getTenant({\n   *   name: \"my_tenant\",\n   * });\n   * ```\n   */\n  public async getTenant({ name }: { name: string }): Promise<Tenant> {\n    const getTenant = (await this.api.getTenant(\n      name,\n      this.api.options,\n    )) as Tenant;\n\n    return { name: getTenant.name };\n  }\n\n  /**\n   * Creates a new database with the specified properties.\n   *\n   * @param {Object} params - The parameters for creating a new database.\n   * @param {string} params.name - The name of the database.\n   * @param {string} params.tenantName - The name of the tenant.\n   *\n   * @returns {Promise<Database>} A promise that resolves to the created database.\n   * @throws {Error} If there is an issue creating the database.\n   *\n   * @example\n   * ```typescript\n   * await adminClient.createDatabase({\n   *   name: \"my_database\",\n   *   tenantName: \"my_tenant\",\n   * });\n   * ```\n   */\n  public async createDatabase({\n    name,\n    tenantName,\n  }: {\n    name: string;\n    tenantName: string;\n  }): Promise<Database> {\n    await this.api.createDatabase(tenantName, { name }, this.api.options);\n\n    return { name };\n  }\n\n  /**\n   * Gets a database with the specified properties.\n   *\n   * @param {Object} params - The parameters for getting a database.\n   * @param {string} params.name - The name of the database.\n   * @param {string} params.tenantName - The name of the tenant.\n   *\n   * @returns {Promise<Database>} A promise that resolves to the database.\n   * @throws {Error} If there is an issue getting the database.\n   *\n   * @example\n   * ```typescript\n   * await adminClient.getDatabase({\n   *   name: \"my_database\",\n   *   tenantName: \"my_tenant\",\n   * });\n   * ```\n   */\n  public async getDatabase({\n    name,\n    tenantName,\n  }: {\n    name: string;\n    tenantName: string;\n  }): Promise<Database> {\n    const getDatabase = (await this.api.getDatabase(\n      name,\n      tenantName,\n      this.api.options,\n    )) as Database;\n\n    return { name: getDatabase.name } as Database;\n  }\n}\n","import { isBrowser } from \"../utils\";\nimport { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\n// Dynamically import module\nlet TransformersApi: Promise<any>;\n\nexport class DefaultEmbeddingFunction implements IEmbeddingFunction {\n  private pipelinePromise?: Promise<any> | null;\n  private transformersApi: any;\n  private model: string;\n  private revision: string;\n  private quantized: boolean;\n  private progress_callback: Function | null;\n\n  /**\n   * DefaultEmbeddingFunction constructor.\n   * @param options The configuration options.\n   * @param options.model The model to use to calculate embeddings. Defaults to 'Xenova/all-MiniLM-L6-v2', which is an ONNX port of `sentence-transformers/all-MiniLM-L6-v2`.\n   * @param options.revision The specific model version to use (can be a branch, tag name, or commit id). Defaults to 'main'.\n   * @param options.quantized Whether to load the 8-bit quantized version of the model. Defaults to `false`.\n   * @param options.progress_callback If specified, this function will be called during model construction, to provide the user with progress updates.\n   */\n  constructor({\n    model = \"Xenova/all-MiniLM-L6-v2\",\n    revision = \"main\",\n    quantized = false,\n    progress_callback = null,\n  }: {\n    model?: string;\n    revision?: string;\n    quantized?: boolean;\n    progress_callback?: Function | null;\n  } = {}) {\n    this.model = model;\n    this.revision = revision;\n    this.quantized = quantized;\n    this.progress_callback = progress_callback;\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.loadClient();\n\n    // Store a promise that resolves to the pipeline\n    this.pipelinePromise = new Promise(async (resolve, reject) => {\n      try {\n        const pipeline = this.transformersApi;\n\n        const quantized = this.quantized;\n        const revision = this.revision;\n        const progress_callback = this.progress_callback;\n\n        resolve(\n          await pipeline(\"feature-extraction\", this.model, {\n            quantized,\n            revision,\n            progress_callback,\n          }),\n        );\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    let pipe = await this.pipelinePromise;\n    let output = await pipe(texts, { pooling: \"mean\", normalize: true });\n    return output.tolist();\n  }\n\n  private async loadClient() {\n    if (this.transformersApi) return;\n    try {\n      // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n      let { pipeline } = await DefaultEmbeddingFunction.import();\n      TransformersApi = pipeline;\n    } catch (_a) {\n      // @ts-ignore\n      if (_a.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the chromadb-default-embed package to use the DefaultEmbeddingFunction, `npm install chromadb-default-embed`\",\n        );\n      }\n      throw _a; // Re-throw other errors\n    }\n    this.transformersApi = TransformersApi;\n  }\n\n  /** @ignore */\n  static async import(): Promise<{\n    // @ts-expect-error\n    pipeline: typeof import(\"chromadb-default-embed\");\n  }> {\n    try {\n      let importResult;\n      if (isBrowser()) {\n        importResult = await import(\n          // todo: we can't import chromadb-default-embed here yet because the `build` script was not run before publishing our fork to NPM, so the entrypoint in our forked package points to a non-existent file.\n          // @ts-expect-error\n          \"https://unpkg.com/@xenova/transformers@2.13.2\"\n        );\n      } else {\n        // @ts-expect-error\n        importResult = await import(\"chromadb-default-embed\");\n      }\n      const { pipeline, env } = importResult;\n\n      // By default, transformers.js attempts to first load models from the site origin when running in a browser (and then falls back to loading from HuggingFace).\n      // SPA servers like Vite tend to break this because by default they serve the same document regardless of the path, so transformers.js sees a 200 response and treats the HTML response as model JSON.\n      // todo: expose this as a config parameter in the future?\n      env.allowLocalModels = false;\n\n      return { pipeline };\n    } catch (e) {\n      throw new Error(\n        \"Please install chromadb-default-embed as a dependency with, e.g. `npm install chromadb-default-embed`\",\n      );\n    }\n  }\n}\n","import { AdminClient } from \"./AdminClient\";\nimport { authOptionsToAuthProvider, ClientAuthProvider } from \"./auth\";\nimport { chromaFetch } from \"./ChromaFetch\";\nimport { Collection } from \"./Collection\";\nimport { DefaultEmbeddingFunction } from \"./embeddings/DefaultEmbeddingFunction\";\nimport { Configuration, ApiApi as DefaultApi } from \"./generated\";\nimport type {\n  ChromaClientParams,\n  CollectionParams,\n  ConfigOptions,\n  CreateCollectionParams,\n  DeleteCollectionParams,\n  GetCollectionParams,\n  GetOrCreateCollectionParams,\n  ListCollectionsParams,\n} from \"./types\";\nimport { validateTenantDatabase, wrapCollection } from \"./utils\";\n\nconst DEFAULT_TENANT = \"default_tenant\";\nconst DEFAULT_DATABASE = \"default_database\";\n\nexport class ChromaClient {\n  /**\n   * @ignore\n   */\n  public api: DefaultApi & ConfigOptions;\n  /**\n   * @ignore\n   */\n  private tenant: string;\n  /**\n   * @ignore\n   */\n  private database: string;\n  /**\n   * @ignore\n   */\n  private _adminClient: AdminClient;\n  /**\n   * @ignore\n   */\n  private authProvider: ClientAuthProvider | undefined;\n  /**\n   * @ignore\n   */\n  private _initPromise: Promise<void> | undefined;\n\n  /**\n   * Creates a new ChromaClient instance.\n   * @param {Object} params - The parameters for creating a new client\n   * @param {string} [params.path] - The base path for the Chroma API.\n   * @returns {ChromaClient} A new ChromaClient instance.\n   *\n   * @example\n   * ```typescript\n   * const client = new ChromaClient({\n   *   path: \"http://localhost:8000\"\n   * });\n   * ```\n   */\n  constructor({\n    path = \"http://localhost:8000\",\n    fetchOptions,\n    auth,\n    tenant = DEFAULT_TENANT,\n    database = DEFAULT_DATABASE,\n  }: ChromaClientParams = {}) {\n    this.tenant = tenant;\n    this.database = database;\n    this.authProvider = undefined;\n\n    const apiConfig: Configuration = new Configuration({\n      basePath: path,\n    });\n\n    this.api = new DefaultApi(apiConfig, undefined, chromaFetch);\n    this.api.options = fetchOptions ?? {};\n\n    if (auth !== undefined) {\n      this.authProvider = authOptionsToAuthProvider(auth);\n      this.api.options.headers = {\n        ...this.api.options.headers,\n        ...this.authProvider.authenticate(),\n      };\n    }\n\n    this._adminClient = new AdminClient({\n      path,\n      fetchOptions,\n      auth,\n      tenant,\n      database,\n    });\n  }\n\n  /** @ignore */\n  init(): Promise<void> {\n    if (!this._initPromise) {\n      this._initPromise = validateTenantDatabase(\n        this._adminClient,\n        this.tenant,\n        this.database,\n      );\n    }\n\n    return this._initPromise;\n  }\n\n  /**\n   * Resets the state of the object by making an API call to the reset endpoint.\n   *\n   * @returns {Promise<boolean>} A promise that resolves when the reset operation is complete.\n   * @throws {ChromaConnectionError} If the client is unable to connect to the server.\n   * @throws {ChromaServerError} If the server experienced an error while the state.\n   *\n   * @example\n   * ```typescript\n   * await client.reset();\n   * ```\n   */\n  async reset(): Promise<boolean> {\n    await this.init();\n    return await this.api.reset(this.api.options);\n  }\n\n  /**\n   * Returns the version of the Chroma API.\n   * @returns {Promise<string>} A promise that resolves to the version of the Chroma API.\n   * @throws {ChromaConnectionError} If the client is unable to connect to the server.\n   *\n   * @example\n   * ```typescript\n   * const version = await client.version();\n   * ```\n   */\n  async version(): Promise<string> {\n    return await this.api.version(this.api.options);\n  }\n\n  /**\n   * Returns a heartbeat from the Chroma API.\n   * @returns {Promise<number>} A promise that resolves to the heartbeat from the Chroma API.\n   * @throws {ChromaConnectionError} If the client is unable to connect to the server.\n   *\n   * @example\n   * ```typescript\n   * const heartbeat = await client.heartbeat();\n   * ```\n   */\n  async heartbeat(): Promise<number> {\n    const response = await this.api.heartbeat(this.api.options);\n    return response[\"nanosecond heartbeat\"];\n  }\n\n  /**\n   * Creates a new collection with the specified properties.\n   *\n   * @param {Object} params - The parameters for creating a new collection.\n   * @param {string} params.name - The name of the collection.\n   * @param {CollectionMetadata} [params.metadata] - Optional metadata associated with the collection.\n   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.\n   *\n   * @returns {Promise<Collection>} A promise that resolves to the created collection.\n   * @throws {ChromaConnectionError} If the client is unable to connect to the server.\n   * @throws {ChromaServerError} If there is an issue creating the collection.\n   *\n   * @example\n   * ```typescript\n   * const collection = await client.createCollection({\n   *   name: \"my_collection\",\n   *   metadata: {\n   *     \"description\": \"My first collection\"\n   *   }\n   * });\n   * ```\n   */\n  async createCollection({\n    name,\n    metadata,\n    embeddingFunction = new DefaultEmbeddingFunction(),\n  }: CreateCollectionParams): Promise<Collection> {\n    await this.init();\n    const newCollection = (await this.api.createCollection(\n      this.tenant,\n      this.database,\n      {\n        name,\n        // @ts-ignore: we need to generate the client libraries again\n        configuration: null, //TODO: Configuration type in JavaScript\n        metadata,\n      },\n      this.api.options,\n    )) as CollectionParams;\n\n    return wrapCollection(this, {\n      name: newCollection.name,\n      id: newCollection.id,\n      metadata: newCollection.metadata,\n      embeddingFunction,\n    });\n  }\n\n  /**\n   * Gets or creates a collection with the specified properties.\n   *\n   * @param {Object} params - The parameters for creating a new collection.\n   * @param {string} params.name - The name of the collection.\n   * @param {CollectionMetadata} [params.metadata] - Optional metadata associated with the collection.\n   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.\n   *\n   * @returns {Promise<Collection>} A promise that resolves to the got or created collection.\n   * @throws {Error} If there is an issue getting or creating the collection.\n   *\n   * @example\n   * ```typescript\n   * const collection = await client.getOrCreateCollection({\n   *   name: \"my_collection\",\n   *   metadata: {\n   *     \"description\": \"My first collection\"\n   *   }\n   * });\n   * ```\n   */\n  async getOrCreateCollection({\n    name,\n    metadata,\n    embeddingFunction = new DefaultEmbeddingFunction(),\n  }: GetOrCreateCollectionParams): Promise<Collection> {\n    await this.init();\n    const newCollection = (await this.api.createCollection(\n      this.tenant,\n      this.database,\n      {\n        name,\n        // @ts-ignore: we need to generate the client libraries again\n        configuration: null, //TODO: Configuration type in JavaScript\n        metadata,\n        get_or_create: true,\n      },\n      this.api.options,\n    )) as CollectionParams;\n\n    return wrapCollection(this, {\n      name: newCollection.name,\n      id: newCollection.id,\n      metadata: newCollection.metadata,\n      embeddingFunction,\n    });\n  }\n\n  /**\n   * Lists all collections.\n   *\n   * @returns {Promise<CollectionType[]>} A promise that resolves to a list of collection names.\n   * @param {PositiveInteger} [params.limit] - Optional limit on the number of items to get.\n   * @param {PositiveInteger} [params.offset] - Optional offset on the items to get.\n   * @throws {Error} If there is an issue listing the collections.\n   *\n   * @example\n   * ```typescript\n   * const collections = await client.listCollections({\n   *     limit: 10,\n   *     offset: 0,\n   * });\n   * ```\n   */\n  async listCollections({ limit, offset }: ListCollectionsParams = {}): Promise<\n    CollectionParams[]\n  > {\n    await this.init();\n    return (await this.api.listCollections(\n      limit,\n      offset,\n      this.tenant,\n      this.database,\n      this.api.options,\n    )) as CollectionParams[];\n  }\n\n  /**\n   * Counts all collections.\n   *\n   * @returns {Promise<number>} A promise that resolves to the number of collections.\n   * @throws {Error} If there is an issue counting the collections.\n   *\n   * @example\n   * ```typescript\n   * const collections = await client.countCollections();\n   * ```\n   */\n  async countCollections(): Promise<number> {\n    await this.init();\n\n    return (await this.api.countCollections(\n      this.tenant,\n      this.database,\n      this.api.options,\n    )) as number;\n  }\n\n  /**\n   * Gets a collection with the specified name.\n   * @param {Object} params - The parameters for getting a collection.\n   * @param {string} params.name - The name of the collection.\n   * @param {IEmbeddingFunction} [params.embeddingFunction] - Optional custom embedding function for the collection.\n   * @returns {Promise<Collection>} A promise that resolves to the collection.\n   * @throws {Error} If there is an issue getting the collection.\n   *\n   * @example\n   * ```typescript\n   * const collection = await client.getCollection({\n   *   name: \"my_collection\"\n   * });\n   * ```\n   */\n  async getCollection({\n    name,\n    embeddingFunction,\n  }: GetCollectionParams): Promise<Collection> {\n    await this.init();\n\n    const response = (await this.api.getCollection(\n      name,\n      this.tenant,\n      this.database,\n      this.api.options,\n    )) as CollectionParams;\n\n    return wrapCollection(this, {\n      name: response.name,\n      id: response.id,\n      metadata: response.metadata,\n      embeddingFunction,\n    });\n  }\n\n  /**\n   * Deletes a collection with the specified name.\n   * @param {Object} params - The parameters for deleting a collection.\n   * @param {string} params.name - The name of the collection.\n   * @returns {Promise<void>} A promise that resolves when the collection is deleted.\n   * @throws {Error} If there is an issue deleting the collection.\n   *\n   * @example\n   * ```typescript\n   * await client.deleteCollection({\n   *  name: \"my_collection\"\n   * });\n   * ```\n   */\n  async deleteCollection({ name }: DeleteCollectionParams): Promise<void> {\n    await this.init();\n\n    await this.api.deleteCollection(\n      name,\n      this.tenant,\n      this.database,\n      this.api.options,\n    );\n  }\n}\n","// create a cloudclient class that takes in an api key and an optional database\n// this should wrap ChromaClient and specify the auth scheme correctly\n\nimport { ChromaClient } from \"./ChromaClient\";\nimport { AuthOptions } from \"./auth\";\n\ninterface CloudClientParams {\n  apiKey?: string;\n  database?: string;\n  tenant?: string;\n  cloudHost?: string;\n  cloudPort?: string;\n}\n\nclass CloudClient extends ChromaClient {\n  constructor({\n    apiKey,\n    database,\n    tenant,\n    cloudHost,\n    cloudPort,\n  }: CloudClientParams) {\n    // If no API key is provided, try to load it from the environment variable\n    if (!apiKey) {\n      apiKey = process.env.CHROMA_API_KEY;\n    }\n    if (!apiKey) {\n      throw new Error(\"No API key provided\");\n    }\n\n    cloudHost = cloudHost || \"https://api.trychroma.com\";\n    cloudPort = cloudPort || \"8000\";\n\n    const path = `${cloudHost}:${cloudPort}`;\n\n    const auth: AuthOptions = {\n      provider: \"token\",\n      credentials: apiKey,\n      tokenHeaderType: \"X_CHROMA_TOKEN\",\n    };\n\n    return new ChromaClient({\n      path: path,\n      auth: auth,\n      database,\n      tenant,\n    });\n\n    super();\n  }\n}\n\nexport { CloudClient };\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nlet OpenAIApi: any;\nlet openAiVersion = null;\nlet openAiMajorVersion = null;\n\ninterface OpenAIAPI {\n  createEmbedding: (params: {\n    model: string;\n    input: string[];\n    user?: string;\n  }) => Promise<number[][]>;\n}\n\nclass OpenAIAPIv3 implements OpenAIAPI {\n  private readonly configuration: any;\n  private openai: any;\n\n  constructor(configuration: { organization: string; apiKey: string }) {\n    this.configuration = new OpenAIApi.Configuration({\n      organization: configuration.organization,\n      apiKey: configuration.apiKey,\n    });\n    this.openai = new OpenAIApi.OpenAIApi(this.configuration);\n  }\n\n  public async createEmbedding(params: {\n    model: string;\n    input: string[];\n    user?: string;\n  }): Promise<number[][]> {\n    const embeddings: number[][] = [];\n    const response = await this.openai\n      .createEmbedding({\n        model: params.model,\n        input: params.input,\n      })\n      .catch((error: any) => {\n        throw error;\n      });\n    // @ts-ignore\n    const data = response.data[\"data\"];\n    for (let i = 0; i < data.length; i += 1) {\n      embeddings.push(data[i][\"embedding\"]);\n    }\n    return embeddings;\n  }\n}\n\nclass OpenAIAPIv4 implements OpenAIAPI {\n  private readonly apiKey: any;\n  private openai: any;\n\n  constructor(apiKey: any) {\n    this.apiKey = apiKey;\n    this.openai = new OpenAIApi({\n      apiKey: this.apiKey,\n    });\n  }\n\n  public async createEmbedding(params: {\n    model: string;\n    input: string[];\n    user?: string;\n  }): Promise<number[][]> {\n    const embeddings: number[][] = [];\n    const response = await this.openai.embeddings.create(params);\n    const data = response[\"data\"];\n    for (let i = 0; i < data.length; i += 1) {\n      embeddings.push(data[i][\"embedding\"]);\n    }\n    return embeddings;\n  }\n}\n\nexport class OpenAIEmbeddingFunction implements IEmbeddingFunction {\n  private api_key: string;\n  private org_id: string;\n  private model: string;\n  private openaiApi?: OpenAIAPI;\n\n  constructor({\n    openai_api_key,\n    openai_model,\n    openai_organization_id,\n  }: {\n    openai_api_key: string;\n    openai_model?: string;\n    openai_organization_id?: string;\n  }) {\n    // we used to construct the client here, but we need to async import the types\n    // for the openai npm package, and the constructor can not be async\n    this.api_key = openai_api_key;\n    this.org_id = openai_organization_id || \"\";\n    this.model = openai_model || \"text-embedding-ada-002\";\n  }\n\n  private async loadClient() {\n    // cache the client\n    if (this.openaiApi) return;\n\n    try {\n      const { openai, version } = await OpenAIEmbeddingFunction.import();\n      OpenAIApi = openai;\n      let versionVar: string = version;\n      openAiVersion = versionVar.replace(/[^0-9.]/g, \"\");\n      openAiMajorVersion = parseInt(openAiVersion.split(\".\")[0]);\n    } catch (_a) {\n      // @ts-ignore\n      if (_a.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the openai package to use the OpenAIEmbeddingFunction, e.g. `npm install openai`\",\n        );\n      }\n      throw _a; // Re-throw other errors\n    }\n\n    if (openAiMajorVersion > 3) {\n      this.openaiApi = new OpenAIAPIv4(this.api_key);\n    } else {\n      this.openaiApi = new OpenAIAPIv3({\n        organization: this.org_id,\n        apiKey: this.api_key,\n      });\n    }\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.loadClient();\n\n    return await this.openaiApi!.createEmbedding({\n      model: this.model,\n      input: texts,\n    }).catch((error: any) => {\n      throw error;\n    });\n  }\n\n  /** @ignore */\n  static async import(): Promise<{\n    // @ts-ignore\n    openai: typeof import(\"openai\");\n    version: string;\n  }> {\n    try {\n      // @ts-ignore\n      const { default: openai } = await import(\"openai\");\n      // @ts-ignore\n      const { VERSION } = await import(\"openai/version\");\n      // @ts-ignore\n      return { openai, version: VERSION };\n    } catch (e) {\n      throw new Error(\n        \"Please install the openai package to use the OpenAIEmbeddingFunction, e.g. `npm install openai`\",\n      );\n    }\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\ninterface CohereAIAPI {\n  createEmbedding: (params: {\n    model: string;\n    input: string[];\n  }) => Promise<number[][]>;\n}\n\nclass CohereAISDK56 implements CohereAIAPI {\n  private cohereClient: any;\n  private apiKey: string;\n\n  constructor(configuration: { apiKey: string }) {\n    this.apiKey = configuration.apiKey;\n  }\n\n  private async loadClient() {\n    if (this.cohereClient) return;\n    //@ts-ignore\n    const { default: cohere } = await import(\"cohere-ai\");\n    // @ts-ignore\n    cohere.init(this.apiKey);\n    this.cohereClient = cohere;\n  }\n\n  public async createEmbedding(params: {\n    model: string;\n    input: string[];\n  }): Promise<number[][]> {\n    await this.loadClient();\n    return await this.cohereClient\n      .embed({\n        texts: params.input,\n        model: params.model,\n      })\n      .then((response: any) => {\n        return response.body.embeddings;\n      });\n  }\n}\n\nclass CohereAISDK7 implements CohereAIAPI {\n  private cohereClient: any;\n  private apiKey: string;\n\n  constructor(configuration: { apiKey: string }) {\n    this.apiKey = configuration.apiKey;\n  }\n\n  private async loadClient() {\n    if (this.cohereClient) return;\n    //@ts-ignore\n    const cohere = await import(\"cohere-ai\").then((cohere) => {\n      return cohere;\n    });\n    // @ts-ignore\n    this.cohereClient = new cohere.CohereClient({\n      token: this.apiKey,\n    });\n  }\n\n  public async createEmbedding(params: {\n    model: string;\n    input: string[];\n  }): Promise<number[][]> {\n    await this.loadClient();\n    return await this.cohereClient\n      .embed({ texts: params.input, model: params.model })\n      .then((response: any) => {\n        return response.embeddings;\n      });\n  }\n}\n\nexport class CohereEmbeddingFunction implements IEmbeddingFunction {\n  private cohereAiApi?: CohereAIAPI;\n  private model: string;\n  private apiKey: string;\n  constructor({\n    cohere_api_key,\n    model,\n  }: {\n    cohere_api_key: string;\n    model?: string;\n  }) {\n    this.model = model || \"large\";\n    this.apiKey = cohere_api_key;\n  }\n\n  private async initCohereClient() {\n    if (this.cohereAiApi) return;\n    try {\n      // @ts-ignore\n      this.cohereAiApi = await import(\"cohere-ai\").then((cohere) => {\n        // @ts-ignore\n        if (cohere.CohereClient) {\n          return new CohereAISDK7({ apiKey: this.apiKey });\n        } else {\n          return new CohereAISDK56({ apiKey: this.apiKey });\n        }\n      });\n    } catch (e) {\n      // @ts-ignore\n      if (e.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the cohere-ai package to use the CohereEmbeddingFunction, `npm install -S cohere-ai`\",\n        );\n      }\n      throw e;\n    }\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.initCohereClient();\n    // @ts-ignore\n    return await this.cohereAiApi.createEmbedding({\n      model: this.model,\n      input: texts,\n    });\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\n// Dynamically import module\nlet TransformersApi: Promise<any>;\n\nexport class TransformersEmbeddingFunction implements IEmbeddingFunction {\n  private pipelinePromise?: Promise<any> | null;\n  private transformersApi: any;\n  private model: string;\n  private revision: string;\n  private quantized: boolean;\n  private progress_callback: Function | null;\n\n  /**\n   * TransformersEmbeddingFunction constructor.\n   * @param options The configuration options.\n   * @param options.model The model to use to calculate embeddings. Defaults to 'Xenova/all-MiniLM-L6-v2', which is an ONNX port of `sentence-transformers/all-MiniLM-L6-v2`.\n   * @param options.revision The specific model version to use (can be a branch, tag name, or commit id). Defaults to 'main'.\n   * @param options.quantized Whether to load the 8-bit quantized version of the model. Defaults to `false`.\n   * @param options.progress_callback If specified, this function will be called during model construction, to provide the user with progress updates.\n   */\n  constructor({\n    model = \"Xenova/all-MiniLM-L6-v2\",\n    revision = \"main\",\n    quantized = false,\n    progress_callback = null,\n  }: {\n    model?: string;\n    revision?: string;\n    quantized?: boolean;\n    progress_callback?: Function | null;\n  } = {}) {\n    this.model = model;\n    this.revision = revision;\n    this.quantized = quantized;\n    this.progress_callback = progress_callback;\n  }\n\n  public async generate(texts: string[]): Promise<number[][]> {\n    await this.loadClient();\n\n    // Store a promise that resolves to the pipeline\n    this.pipelinePromise = new Promise(async (resolve, reject) => {\n      try {\n        const pipeline = this.transformersApi;\n\n        const quantized = this.quantized;\n        const revision = this.revision;\n        const progress_callback = this.progress_callback;\n\n        resolve(\n          await pipeline(\"feature-extraction\", this.model, {\n            quantized,\n            revision,\n            progress_callback,\n          }),\n        );\n      } catch (e) {\n        reject(e);\n      }\n    });\n\n    let pipe = await this.pipelinePromise;\n    let output = await pipe(texts, { pooling: \"mean\", normalize: true });\n    return output.tolist();\n  }\n\n  private async loadClient() {\n    if (this.transformersApi) return;\n    try {\n      // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n      let { pipeline } = await TransformersEmbeddingFunction.import();\n      TransformersApi = pipeline;\n    } catch (_a) {\n      // @ts-ignore\n      if (_a.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the @xenova/transformers package to use the TransformersEmbeddingFunction, `npm install @xenova/transformers`\",\n        );\n      }\n      throw _a; // Re-throw other errors\n    }\n    this.transformersApi = TransformersApi;\n  }\n\n  /** @ignore */\n  static async import(): Promise<{\n    // @ts-ignore\n    pipeline: typeof import(\"@xenova/transformers\");\n  }> {\n    try {\n      // @ts-ignore\n      const { pipeline } = await import(\"@xenova/transformers\");\n      return { pipeline };\n    } catch (e) {\n      throw new Error(\n        \"Please install @xenova/transformers as a dependency with, e.g. `npm install @xenova/transformers`\",\n      );\n    }\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nlet CohereAiApi: any;\n\nexport class HuggingFaceEmbeddingServerFunction implements IEmbeddingFunction {\n  private url: string;\n\n  constructor({ url }: { url: string }) {\n    // we used to construct the client here, but we need to async import the types\n    // for the openai npm package, and the constructor can not be async\n    this.url = url;\n  }\n\n  public async generate(texts: string[]) {\n    const response = await fetch(this.url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ inputs: texts }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to generate embeddings: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data;\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nexport class JinaEmbeddingFunction implements IEmbeddingFunction {\n  private model_name: string;\n  private api_url: string;\n  private headers: { [key: string]: string };\n\n  constructor({\n    jinaai_api_key,\n    model_name,\n  }: {\n    jinaai_api_key: string;\n    model_name?: string;\n  }) {\n    this.model_name = model_name || \"jina-embeddings-v2-base-en\";\n    this.api_url = \"https://api.jina.ai/v1/embeddings\";\n    this.headers = {\n      Authorization: `Bearer ${jinaai_api_key}`,\n      \"Accept-Encoding\": \"identity\",\n      \"Content-Type\": \"application/json\",\n    };\n  }\n\n  public async generate(texts: string[]) {\n    try {\n      const response = await fetch(this.api_url, {\n        method: \"POST\",\n        headers: this.headers,\n        body: JSON.stringify({\n          input: texts,\n          model: this.model_name,\n        }),\n      });\n\n      const data = (await response.json()) as { data: any[]; detail: string };\n      if (!data || !data.data) {\n        throw new Error(data.detail);\n      }\n\n      const embeddings: any[] = data.data;\n      const sortedEmbeddings = embeddings.sort((a, b) => a.index - b.index);\n\n      return sortedEmbeddings.map((result) => result.embedding);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Error calling Jina AI API: ${error.message}`);\n      } else {\n        throw new Error(`Error calling Jina AI API: ${error}`);\n      }\n    }\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nlet googleGenAiApi: any;\n\nexport class GoogleGenerativeAiEmbeddingFunction implements IEmbeddingFunction {\n  private api_key: string;\n  private model: string;\n  private googleGenAiApi?: any;\n  private taskType: string;\n\n  constructor({\n    googleApiKey,\n    model,\n    taskType,\n  }: {\n    googleApiKey: string;\n    model?: string;\n    taskType?: string;\n  }) {\n    // we used to construct the client here, but we need to async import the types\n    // for the openai npm package, and the constructor can not be async\n    this.api_key = googleApiKey;\n    this.model = model || \"embedding-001\";\n    this.taskType = taskType || \"RETRIEVAL_DOCUMENT\";\n  }\n\n  private async loadClient() {\n    if (this.googleGenAiApi) return;\n    try {\n      // eslint-disable-next-line global-require,import/no-extraneous-dependencies\n      const { googleGenAi } =\n        await GoogleGenerativeAiEmbeddingFunction.import();\n      googleGenAiApi = googleGenAi;\n      // googleGenAiApi.init(this.api_key);\n      googleGenAiApi = new googleGenAiApi(this.api_key);\n    } catch (_a) {\n      // @ts-ignore\n      if (_a.code === \"MODULE_NOT_FOUND\") {\n        throw new Error(\n          \"Please install the @google/generative-ai package to use the GoogleGenerativeAiEmbeddingFunction, `npm install @google/generative-ai`\",\n        );\n      }\n      throw _a; // Re-throw other errors\n    }\n    this.googleGenAiApi = googleGenAiApi;\n  }\n\n  public async generate(texts: string[]) {\n    await this.loadClient();\n    const model = this.googleGenAiApi.getGenerativeModel({ model: this.model });\n    const response = await model.batchEmbedContents({\n      requests: texts.map((t) => ({\n        content: { parts: [{ text: t }] },\n        taskType: this.taskType,\n      })),\n    });\n    const embeddings = response.embeddings.map((e: any) => e.values);\n\n    return embeddings;\n  }\n\n  /** @ignore */\n  static async import(): Promise<{\n    // @ts-ignore\n    googleGenAi: typeof import(\"@google/generative-ai\");\n  }> {\n    try {\n      // @ts-ignore\n      const { GoogleGenerativeAI } = await import(\"@google/generative-ai\");\n      const googleGenAi = GoogleGenerativeAI;\n      // @ts-ignore\n      return { googleGenAi };\n    } catch (e) {\n      throw new Error(\n        \"Please install @google/generative-ai as a dependency with, e.g. `npm install @google/generative-ai`\",\n      );\n    }\n  }\n}\n","import { IEmbeddingFunction } from \"./IEmbeddingFunction\";\n\nexport class OllamaEmbeddingFunction implements IEmbeddingFunction {\n  private readonly url: string;\n  private readonly model: string;\n\n  constructor({ url, model }: { url: string; model: string }) {\n    // we used to construct the client here, but we need to async import the types\n    // for the openai npm package, and the constructor can not be async\n    this.url = url;\n    this.model = model;\n  }\n\n  public async generate(texts: string[]) {\n    let embeddings: number[][] = [];\n    for (let text of texts) {\n      const response = await fetch(this.url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ model: this.model, prompt: text }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `Failed to generate embeddings: ${response.status} (${response.statusText})`,\n        );\n      }\n      let finalResponse = await response.json();\n      embeddings.push(finalResponse[\"embedding\"]);\n    }\n    return embeddings;\n  }\n}\n"],"mappings":"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","names":["fetch","fetch","Api","IncludeEnum","DEFAULT_TENANT","DEFAULT_DATABASE","cohere","TransformersApi"]}