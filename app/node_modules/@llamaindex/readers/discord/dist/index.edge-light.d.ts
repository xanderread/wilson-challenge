import { RESTOptions } from '@discordjs/rest';
import { BaseReader, Document } from '@llamaindex/core/schema';

/**
 * Represents a reader for Discord messages using @discordjs/rest
 * See https://github.com/discordjs/discord.js/tree/main/packages/rest
 */
declare class DiscordReader implements BaseReader {
    private client;
    constructor(discordToken?: string, requestHandler?: RESTOptions["makeRequest"]);
    private readChannel;
    private createDocumentFromMessage;
    private embedToString;
    /**
     * Loads messages from multiple discord channels and returns an array of Document Objects.
     *
     * @param {string[]} channelIds - An array of channel IDs from which to load data.
     * @param {number} [limit] - An optional limit on the number of messages to load per channel.
     * @param {boolean} [additionalInfo] - An optional flag to include content from embedded messages and attachments urls as text.
     * @param {boolean} [oldestFirst] - An optional flag to load oldest messages first.
     * @return {Promise<Document[]>} A promise that resolves to an array of loaded documents.
     */
    loadData(channelIds: string[], limit?: number, additionalInfo?: boolean, oldestFirst?: boolean): Promise<Document[]>;
}

export { DiscordReader };
