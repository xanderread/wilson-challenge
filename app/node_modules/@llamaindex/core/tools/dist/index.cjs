Object.defineProperty(exports, '__esModule', { value: true });

var zod = require('zod');
var zodToJsonSchema = require('zod-to-json-schema');

class FunctionTool {
    #fn;
    #metadata;
    // todo: for the future, we can use zod to validate the input parameters
    #zodType;
    constructor(fn, metadata, zodType){
        this.#zodType = null;
        this.#fn = fn;
        this.#metadata = metadata;
        if (zodType) {
            this.#zodType = zodType;
        }
    }
    static from(fn, schema) {
        if (schema.parameter instanceof zod.z.ZodSchema) {
            const jsonSchema = zodToJsonSchema.zodToJsonSchema(schema.parameter);
            return new FunctionTool(fn, {
                ...schema,
                parameters: jsonSchema
            }, schema.parameter);
        }
        return new FunctionTool(fn, schema);
    }
    get metadata() {
        return this.#metadata;
    }
    call(input) {
        return this.#fn.call(null, input);
    }
}

exports.FunctionTool = FunctionTool;
