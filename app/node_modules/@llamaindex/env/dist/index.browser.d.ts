import * as _xenova_transformers from '@xenova/transformers';
import * as node_fs_promises from 'node:fs/promises';
export { default as path } from 'pathe';

type Logger = {
    log: (...args: unknown[]) => void;
    error: (...args: unknown[]) => void;
    warn: (...args: unknown[]) => void;
};
declare const emptyLogger: Logger;
declare const consoleLogger: Logger;

declare function setTransformers(t: typeof _xenova_transformers): void;
type OnLoad = (transformer: typeof _xenova_transformers) => void;
type LoadTransformerEvent = {
    transformer: typeof _xenova_transformers;
};

declare function loadTransformers(onLoad: OnLoad): Promise<typeof _xenova_transformers>;

declare enum Tokenizers {
    CL100K_BASE = "cl100k_base"
}
interface Tokenizer {
    encode: (text: string) => Uint32Array;
    decode: (tokens: Uint32Array) => string;
}

declare class TokenizerSingleton {
    private defaultTokenizer;
    constructor();
    tokenizer(encoding?: Tokenizers): Tokenizer;
}
declare const tokenizers: TokenizerSingleton;

declare class NotSupportCurrentRuntimeClass {
    constructor(runtime: string);
    static bind(runtime: string): any;
}

declare function createWriteStream(): void;
declare const fs: typeof node_fs_promises;

/**
 * This function ensures the correct decodings of percent-encoded characters as
 * well as ensuring a cross-platform valid absolute path string.
 */
declare function fileURLToPath(href: string, separator: string): string;

declare function setEnvs(envs: object): void;
declare function getEnv(name: string): string | undefined;
declare class AsyncLocalStorage<T> {
    #private;
    static bind<Func extends (...args: any[]) => any>(fn: Func): Func;
    static snapshot(): <R, TArgs extends any[]>(fn: (...args: TArgs) => R, ...args: TArgs) => R;
    getStore(): T;
    run<R>(store: T, cb: () => R): R;
}
declare const defaultCustomEvent: any;

declare const processProxy: NodeJS.Process;

declare const Readable: any;
interface SHA256 {
    update(data: string | Uint8Array): void;
    digest(): string;
}
declare const EOL = "\n";
declare function ok(value: unknown, message?: string): asserts value;
declare function createSHA256(): SHA256;
declare function randomUUID(): string;

export { AsyncLocalStorage, defaultCustomEvent as CustomEvent, EOL, type LoadTransformerEvent, type Logger, NotSupportCurrentRuntimeClass, type OnLoad, Readable, type SHA256, type Tokenizer, Tokenizers, consoleLogger, createSHA256, createWriteStream, emptyLogger, fileURLToPath, fs, getEnv, loadTransformers, ok, processProxy as process, randomUUID, setEnvs, setTransformers, tokenizers };
